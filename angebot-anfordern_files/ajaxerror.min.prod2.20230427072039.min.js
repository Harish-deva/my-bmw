var self = this;
self.returnURL = decodeURIComponent(self.getQueryParams('returnURL', window.location.href));

if (window.guideBridge) {
    window.guideBridge.on('unresolveableErrorEvent',function(event, url, payload) {
        payload.referrer = document.referrer;
        payload.returnURL = self.returnURL;
        payload.formOverlay = window.location.pathname.match(/.+\.formoverlay\..+/) ? true : false;
        try {
            payload.tracking = window.formsTrackingData?.getTrackingData()
        } catch(e) {
            payload.tracking = {};
            console.error(e);
        }

        if (window.location.pathname.match(/.+\.debug\..+/)) {
            console.debug("unresolveableErrorEvent: \n {0}", payload);
        } else {
            submitPostRequest(url, payload);
        }
    });
    window.guideBridge.on('successfulSubmissionEvent',function(event, url, payload, redirect) {
        submitPostRequest(url, payload, redirect);
    });
}

function submitPostRequest(url, payload, redirect) {
    url = (window.location.pathname.match(/.+\.formoverlay\..+/)) ? url + '.onlyBody' : url;
    var isRedirected = redirect === undefined ? $('.inpagesuccess').length === 0 : redirect;
    let selector = "business-forms";
    let extensionExpKey = new RegExp(/\.html$/, "i");
    if(!extensionExpKey.test(url)) {
        url = url + ".html";
    }
    let path = insertSelector(url,selector);
    let form = $('<form></form>');
    form.attr("method", "post");
    form.attr("action", path);
    let fieldOperation = $('<input></input>');
    fieldOperation.attr("type", "hidden");
    fieldOperation.attr("name", ":operation");
    fieldOperation.attr("value", "nop");
    let fieldPayload = $('<input></input>');
    fieldPayload.attr("type", "hidden");
    fieldPayload.attr("name", "payload");
    fieldPayload.attr("value", JSON.stringify(payload));
    form.append(fieldOperation);
    form.append(fieldPayload);
    $(document.body).append(form);
    if (isRedirected) {
        form.submit();
    } else {
        $.ajax({
            type: "POST",
            url: path,
            data: form.serialize(),
            success: function(data) {
                setLoadingPageSpinner(false);
                $('.aemformcontainer:not(.inpagesuccess)').empty();
                $('.inpagesuccess').append(data);
            },
            error: function(error) {
                console.warn('Form submission fails.', error)
            }
        });
    }
}

/**
 * Shows/hides the loading spinner during prefill data retrieval.
 * @param {boolean} isLoading
 */
function setLoadingPageSpinner(isLoading) {
    var element = document.getElementById('loadingPage');
    if (element) {
        element.classList.toggle('guideLoading', isLoading);
    }
}

function insertSelector(url, selector) {
    return url.replace(/(?=\.[^.]*$)/, "." + selector);
}

function getQueryParams( params, url ) {
    var href = url;
    //this expression is to get the query strings
    var reg = new RegExp( '[?#&]' + params + '=([^&#]*)', 'i' );
    var queryString = reg.exec(href);
    return queryString ? queryString[1] : null;
};

function isHostEqual(host1, host2){
    try {
        return new URL(host1).hostname === new URL(host2).hostname;
    } catch (e) {
        return false;
    }
};

(function ($, document, guideBridge) {

    var loadError = "Form Loading Error";
    //be aware, that these are the formDataModelIds and not the services itself, if we need to be more specific, it must be checked on service_type
    var errorPathRexExp = new RegExp(/(pdh-services|gcdm-metadata|gcdm-more|gcdm-policy-manager)/, "i");
    var redirectPending = false,

        registerAjaxErrorHandler = function () {
            $(document).ajaxError(ajaxErrorHandler);
            $(document).ajaxSuccess(ajaxSuccessHandler);
        },

        ajaxErrorHandler = function (event, jqXHR, ajaxSettings, thrownError) {
            var error = checkRedirectRequired(ajaxSettings);
            if (!redirectPending && error && (thrownError !== "canceled")) {
                redirectPending = true;
                // in the case guideBridge is not yet ready
                guideBridge.connect(triggerErrorPageRedirect(error), ajaxSettings);
            }
        },

        ajaxSuccessHandler = function (event, jqXHR, ajaxSettings) {
            var error = checkRedirectRequiredOnSuccess(jqXHR, ajaxSettings);
            if (!redirectPending && error) {
                redirectPending = true;
                // in the case guideBridge is not yet ready
                guideBridge.connect(triggerErrorPageRedirect(error), ajaxSettings);
            }
        },

        checkRedirectRequired = function (ajaxSettings) {
            if (ajaxSettings.data) {
                var data = splitData(ajaxSettings.data);
                var urlParameterError = checkModelRangeUrlParameterRequest(data);
                if(errorPathRexExp.test(data.formDataModelId) && !urlParameterError){
                    var payload = {};
                    payload.error = loadError;
                    payload.message = "Form can not be loaded - failed calling ".concat(data.formDataModelId);
                    payload.extra = {
                        reason: data.input ? JSON.parse(data.input) : "",
                        gcdmError: "na",
                        errorCode: "02_02_002_000006:3RD PARTY_NO_NOT AVALIABLE_Check reason why form run into an error"
                    };
                    return payload;
                }
            }
        },

        checkRedirectRequiredOnSuccess = function (jqXHR, ajaxSettings) {
            var data = splitData(ajaxSettings.data);
            if(errorPathRexExp.test(data.formDataModelId)) {
                var payload = {};
                payload.error = loadError;
                payload.message = "Form can not be loaded - failed calling ".concat(ajaxSettings.data? ajaxSettings.data.formDataModelId : "no data property");
                payload.extra = {
                    reason: "No data available",
                    gcdmError: "na",
                    errorCode: "02_02_002_000006:3RD PARTY_NO_NOT AVALIABLE_Check message why form run into an error"
                };
                if(jqXHR.responseText){
                    var regEx = /("serviceType":")(.+?)"/gm;
                    var serviceType = regEx.exec(decodeURIComponent(ajaxSettings.data));
                    if(serviceType && serviceType[2] == "PDH_BREADCRUMB") return;
                    var json = JSON.parse(jqXHR.responseText);
                    var rootElementKey = Object.keys(json)[0];
                    var rootElementValue = Object.values(json)[0];

                    if(Array.isArray(json) && json.length == 0) return payload;

                    if(rootElementKey){
                        if(Array.isArray(rootElementValue) && rootElementValue.length == 0){
                            return payload;
                        }
                        //if all is fine, cotinues without returning payload
                    } else {
                        return payload;
                    }
                } else {
                    return payload;
                }
            }
        },

        splitData = function (data) {
            dermis_data = {};
            if (data) {
                data.split("&")
                    .map(keyVal => {
                        var parts = keyVal.split(/=(.*)$/);
                        dermis_data[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
                    });
            }
            return dermis_data;
        },

        triggerErrorPageRedirect = function (payload) {
            if(guidelib.bf.form.checkForError) {
                guideBridge.trigger('unresolveableErrorEvent',[guidelib.bf.form.defaultErrorPage,
                    {"error":payload.error, "message":payload.message, "extra":payload.extra}])
            }
        };

    checkModelRangeUrlParameterRequest = function (postData) {
        if(!postData.input) return false;
        var input = JSON.parse(postData.input);
        if(!input.range) return false;
        try {
            var url = new URL(window.location.href);
            var urlHash = url.hash;
            var parameterModelRange = url.searchParams.get("modelRange");
        }catch(error){
            var urlHash = window.location.hash;
            var parameterModelRange = null;
        }

        var modelRangeRegEx = new RegExp("(modelRange=).*?(?=[&\?\b]|$)", "g");
        if(urlHash !== "") {
            try {
                var hashModelRange = modelRangeRegEx.exec(urlHash)[0];
                hashModelRange = hashModelRange.replace('modelRange=', '');
            } catch (e) {
                var hashModelRange = null;
            }
        }
        var modelRange = hashModelRange || parameterModelRange;

        return input.range === modelRange;
    };

    registerAjaxErrorHandler();
})($, document, window.guideBridge);
