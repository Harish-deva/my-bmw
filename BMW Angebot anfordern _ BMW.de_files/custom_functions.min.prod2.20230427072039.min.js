window.clientIdPlaceholder = 'clientId';
window.clientVariantIdPlaceholder = 'clientVariantId';
window.localesPlaceholder = 'locales';

guidelib.bf = guidelib.bf || {};
guidelib.bf.func = guidelib.bf.func || {};

/**
 * Proof if cosy image is available and in case it not set it properly
 * @name cosyImageLoadChange Set Cosy Image in case of not existing image
 * @author eggs unimedia GmbH info@eggs.de
 */
window.onload = function () {
    $('.moveNext').on('click', function () {
        if (document.getElementsByClassName('bf-vehicle-cosy-image__image')[0].src.includes('/content')) {
            document.getElementsByClassName('bf-vehicle-cosy-image__image')[0].src = guidelib.bf.cosy.dataProvider.imageURL;
        }
    });
};

/**
 * On form validation, if there is a submission error, moves the focus to the first field with an error.
 */
$(function () {
    $('.moveNext, .submit').on('click', function () {
        setTimeout(function () {
            if ($('.validation-failure').length) {
                var firstError = $('.validation-failure')[0];
                var distanceToTop = $(firstError).offset().top;
                var targetOffset = distanceToTop - $('header').height() - 22;

                window.scrollTo(0, targetOffset);
            }
        }, 1);
    });
});

/**
 * This Function handles GCDM Errors and maps this to the form fields.
 * Only user resolvable errors get mapped. If the error is not resolvable, a redirect to the error page happens.
 *
 * @name handleErrorOnSubmission Handel error on Submission
 * @author eggs unimedia GmbH info@eggs.de
 * @param $event Submission Event
 */

function handleErrorOnSubmission($event) {
    if (guidelib.util.GuideUtil) {
        guidelib.util.GuideUtil.showGuideLoading(true).showMessages(guidelib.i18n.strings.submittingForm);
    }

    var _self = this;

    if (guidelib.bf.context.lang) {
        Granite.I18n.setLocale(guidelib.bf.context.lang);
    }

    var checkForError = guidelib.bf.form.checkForError;
    var submissionError = 'Form Submission Error';
    var captchaReturnCode = 'CAPTCHA_REQUIRED';

    var resolvableErrors = {
        EMPTY: Granite.I18n.get('gcdm.error.EMPTY'),
        ILLEGAL_CHARACTERS: Granite.I18n.get('gcdm.error.ILLEGAL_CHARACTERS'),
        INVALID_FORMAT: Granite.I18n.get('gcdm.error.INVALID_FORMAT'),
        MALICIOUS_CONTENT: Granite.I18n.get('gcdm.error.MALICIOUS_CONTENT'),
        TOO_LARGE: Granite.I18n.get('gcdm.error.TOO_LARGE'),
        TOO_LONG: Granite.I18n.get('gcdm.error.TOO_LONG'),
        TOO_SHORT: Granite.I18n.get('gcdm.error.TOO_SHORT'),
        TOO_SMALL: Granite.I18n.get('gcdm.error.TOO_SMALL'),
    };

    var phoneMappings = {
        BUSINESS_FAX: '',
        BUSINESS_MOB: '',
        BUSINESS_TEL: '',
        PRIVATE_FAX: '',
        PRIVATE_MOB: '',
        PRIVATE_TEL: '',
    };

    var emailMappings = {
        BUSINESS_EMAIL: '',
        PRIVATE_EMAIL: '',
    };

    var emailRexExpKeyFDM = new RegExp(/(PRIVATE|BUSINESS)_EMAIL/, 'i');
    var phoneRexExpKeyFDM = new RegExp(/(PRIVATE|BUSINESS)_(TEL|MOB|FAX)/, 'i');
    var emailRexExpKeyGCDM = new RegExp(/^.*\.communicationEMails\[.\].*$/, 'i');
    var phoneRexExpKeyGCDM = new RegExp(/^.*\.communicationPhones\[.\].*$/, 'i');

    var errorJson = {};
    errorJson.errors = [];
    var captchaRequired = false;

    var trackingComponentData;
    var trackingSelectedComChannelData;
    var formOrigin = 'adobe form';

    var formLeadType = document.querySelector("meta[name='eventLayerSubCategory2']").content;
    var formType = document.querySelector("meta[name='trackingType']").content;
    var formName = document.querySelector("meta[name='eventLayerSubCategory1']").content;
    var formVariant = document.querySelector("meta[name='eventLayerFormVariant']").content;
    var componentVersion = document.querySelector("meta[name='trackingLastFormModification']").content;

    try {
        trackingComponentData = JSON.parse(window.formsTrackingData.get('formTrackingComponent')).trackingComponent;
        trackingSelectedComChannelData = window.formsTrackingData.get('selectedComChannel');
    } catch (e) {
        console.error(e);
    }

    this.checkErrorIsResolveable = function ($errorEvent) {
        var data = $errorEvent.data;
        if (data && data.originMessage) {
            var errorData = JSON.parse(data.originMessage);
            if (errorData && (errorData.errorcode === '1014-300' || errorData.errorCode === '1014-300')) {
                _self.handleErrors(errorData);
            } else {
                _self.handleUnresolveableError({
                    error: submissionError,
                    message: 'on submit - GCDM_MORE request successful, submission error - ' + errorData.message,
                    extra: {
                        reason: errorData.reasons,
                        gcdmError: errorData.errorCode || errorData.errorcode,
                        errorCode: '02',
                        errorOrigin: 'gcdm',
                        errorMessage: 'on submit - GCDM_MORE request successful, submission error - ' + errorData.message,
                        componentData: trackingComponentData,
                        selectedComChannelData: trackingSelectedComChannelData,
                        formLeadType: formLeadType,
                        formType: formType,
                        formName: formName,
                        formVariant: formVariant,
                        formOrigin: formOrigin,
                        componentVersion: componentVersion,

                    },
                });
            }
        } else if (checkForError !== undefined) {
            _self.handleUnresolveableError({
                error: submissionError,
                message: 'on submit - GCDM_MORE request failed - GCDM not available',
                extra: {
                    reason: 'No data was submitted',
                    gcdmError: 'na',
                    errorCode: '02',
                    errorOrigin: 'gcdm',
                    errorMessage: data.error !== undefined ? data.error.message : '',
                    componentData: trackingComponentData,
                    selectedComChannelData: trackingSelectedComChannelData,
                    formLeadType: formLeadType,
                    formType: formType,
                    formName: formName,
                    formVariant: formVariant,
                    formOrigin: formOrigin,
                    componentVersion: componentVersion,
                },
            });
        }
    };

    this.handleErrors = function (errorData) {
        var errorIsResolveable = true;
        var errorReasons = errorData.reasons;
        Object.keys(errorReasons).forEach(function (element, errorReasonKey) {
            captchaRequired = _self.checkIfCaptchaRequired(errorReasons, errorReasonKey);
            if (window.guideBridge && errorIsResolveable) {
                window.guideBridge.visit(function (field) {
                    if (field.className !== 'guidePanel') {
                        var somExpression = field.somExpression;
                        var bindRef = field.bindRef;
                        if (bindRef) {
                            var bindRefElements = bindRef.split('/');
                            var currentFieldId = /[a-zA-Z]\w+/.exec(bindRefElements[bindRefElements.length - 1]);
                            var rexExpKey = new RegExp(currentFieldId, 'g');

                            if (rexExpKey.test(errorReasons[errorReasonKey].property)) {
                                if (_self.checkErrorIsResolveableByField(errorData, errorReasons, errorReasonKey, field)) {
                                    _self.createRegularFieldError(errorReasons, errorReasonKey, field);
                                } else {
                                    errorIsResolveable = false;
                                }
                            } else if (emailRexExpKeyFDM.test(currentFieldId)) {
                                if (!field.isEmpty()) {
                                    emailMappings[currentFieldId] = field.somExpression;
                                }
                            } else if (phoneRexExpKeyFDM.test(currentFieldId)) {
                                if (!field.isEmpty()) {
                                    phoneMappings[currentFieldId] = somExpression;
                                }
                            }
                        }
                    }
                });
            }
        });
        if (errorIsResolveable) _self.createCommunicationErrors(errorReasons, phoneMappings, emailMappings);

        if (errorIsResolveable && errorJson.errors.length > 0) {
            window.guideBridge.handleServerValidationError(errorJson);
            setTimeout(function () { $('div.validation-failure:first > div.guideFieldWidget.textField > input').focus(); }, 100);
            if (guidelib.util.GuideUtil) {
                guidelib.util.GuideUtil.showGuideLoading(false);
            }
        } else if (errorIsResolveable && captchaRequired) {
            this.setCaptchaInForm(captchaRequired);
            if (guidelib.util.GuideUtil) {
                guidelib.util.GuideUtil.showGuideLoading(false);
            }
        } else {
            _self.handleUnresolveableError({
                error: submissionError,
                message: 'on submit - GCDM_MORE request successful, submission error - ' + errorData.message,
                extra: {
                    reason: errorData.reasons,
                    gcdmError: errorData.errorCode || errorData.errorcode,
                    errorCode: '02',
                    errorMessage: 'on submit - GCDM_MORE request successful, submission error - ' + errorData.message,
                    errorOrigin: 'gcdm',
                    componentData: trackingComponentData,
                    selectedComChannelData: trackingSelectedComChannelData,
                    formLeadType: formLeadType,
                    formType: formType,
                    formName: formName,
                    formVariant: formVariant,
                    formOrigin: formOrigin,
                    componentVersion: componentVersion,
                },
            });
        }
    };

    this.createRegularFieldError = function (errorReasons, errorReasonKey, field) {
        var error = {};
        error.somExpression = field.somExpression;
        error.errorMessage = resolvableErrors[errorReasons[errorReasonKey].constraint];
        if (error.somExpression && error.errorMessage) errorJson.errors.unshift(error);
    };

    this.checkErrorIsResolveableByField = function (errorData, errorReasons, errorReasonKey, field) {
        if (Object.prototype.hasOwnProperty.call(resolvableErrors, errorReasons[errorReasonKey].constraint) && field.visible && field.enabled) {
            return true;
        }
        _self.handleUnresolveableError({
            error: submissionError,
            message: 'on submit - GCDM_MORE request successful, submission error - ' + errorData.message,
            extra: {
                reason: errorReasons,
                gcdmError: errorData.errorCode || errorData.errorcode,
                errorCode: '02',
                errorMessage: 'on submit - GCDM_MORE request successful, submission error - ' + errorData.message,
                errorOrigin: 'gcdm',
                componentData: trackingComponentData,
                selectedComChannelData: trackingSelectedComChannelData,
                formLeadType: formLeadType,
                formType: formType,
                formName: formName,
                formVariant: formVariant,
                formOrigin: formOrigin,
                componentVersion: componentVersion,
            },
        });
        return false;
    };

    this.createCommunicationErrors = function (errorReasons, phoneMappings, emailMappings) {
        var phonesObj = Object.values(_self.cleanMappings(phoneMappings));
        var emailsObj = Object.values(_self.cleanMappings(emailMappings));
        Object.keys(errorReasons).forEach(function (errorReasonKey) {
            if (phoneRexExpKeyGCDM.test(errorReasons[errorReasonKey].property)) {
                var phoneError = {};
                phoneError.somExpression = phonesObj[/\d+/.exec(errorReasons[errorReasonKey].property)[0]];
                phoneError.errorMessage = Granite.I18n.get('gcdm.error.phone');
                if (phoneError.somExpression && phoneError.errorMessage) errorJson.errors.unshift(phoneError);
            } else if (emailRexExpKeyGCDM.test(errorReasons[errorReasonKey].property)) {
                var emailError = {};
                emailError.somExpression = emailsObj[/\d+/.exec(errorReasons[errorReasonKey].property)[0]];
                emailError.errorMessage = Granite.I18n.get('gcdm.error.email');
                if (emailError.somExpression && emailError.errorMessage) errorJson.errors.unshift(emailError);
            }
        });
    };

    this.cleanMappings = function (mappings) {
        // todo: refactor this
        // eslint-disable-next-line no-restricted-syntax
        for (var prop in mappings) {
            if (mappings[prop] === '') {
                delete mappings[prop];
            }
        }
        return mappings;
    };

    this.handleUnresolveableError = function (payload) {
        guideBridge.trigger('unresolveableErrorEvent', [guidelib.bf.form.defaultErrorPage,
            { error: payload.error, message: payload.message, extra: payload.extra }]);
        if (guidelib.util.GuideUtil) {
            guidelib.util.GuideUtil.showGuideLoading(false);
        }
    };

    this.checkIfCaptchaRequired = function (errorReasons, errorReasonKey) {
        if (errorReasons[errorReasonKey].constraint === captchaReturnCode) {
            return true;
        }
        return false;
    };

    this.setCaptchaInForm = function (captchaRequired) {
        var context = { forceCaptcha: captchaRequired };
        guideBridge.visit(function (cmp) {
            if (cmp.cssClassName && cmp.cssClassName.split(/\s+/).indexOf('showWithCaptcha') > -1) {
                cmp.visible = this.forceCaptcha;
            }
            if (cmp.jsonModel['sling:resourceType'] === 'custom/captcha') {
                // load google js api and make it visible
                guideBridge.trigger('captcha.gcdm.load', null);
                cmp.visible = this.forceCaptcha;
                if (this.forceCaptcha) {
                    guideBridge.setFocus(cmp.somExpression);
                }
            }
        }, context);
    };

    try {
        _self.checkErrorIsResolveable($event);
    } catch (err) {
        if (checkForError !== undefined) {
            guideBridge.trigger('unresolveableErrorEvent', [guidelib.bf.form.defaultErrorPage, {
                error: submissionError,
                message: 'Form data not submitted - No data was send to GCDM - Error not resolveable by enduser.',
                extra: {
                    reason: 'No data was submitted',
                    gcdmError: 'na',
                    errorCode: '01_02_002_000003:AEM_NO_NOT AVAILABLE_GCDM request returned error code 500 or timeout - the service is not available',
                    errorOrigin: 'gcdm',
                    componentData: trackingComponentData,
                    selectedComChannelData: trackingSelectedComChannelData,
                    formLeadType: formLeadType,
                    formType: formType,
                    formName: formName,
                    formVariant: formVariant,
                    formOrigin: formOrigin,
                    componentVersion: componentVersion,
                },
            }]);
        }
    }
}

/**
 * On a successful submit, this function redirects the user to the success page.
 * Tracking data will be added to the success page.
 *
 * @name redirectOnSuccessfulSubmission Redirect on successful submission
 * @author eggs unimedia GmbH info@eggs.de
 * @param $event Submission Event
 */
function redirectOnSuccessfulSubmission($event) {
    if (guidelib.util.GuideUtil) {
        guidelib.util.GuideUtil.showGuideLoading(true).showMessages(guidelib.i18n.strings.submittingForm);
    }

    var trackingData;
    var trackingComponentData;
    try {
        trackingData = window.formsTrackingData.getTrackingData();
        trackingComponentData = JSON.parse(window.formsTrackingData.get('formTrackingComponent')).trackingComponent;
    } catch (e) {
        console.error(e);
    }

    if (window.guideBridge) {
        var currentResource = guidelib.bf.form.resource;
        var successPageRedirect = guidelib.bf.form.defaultSuccessPage;
        successPageRedirect = addSelector(successPageRedirect);
        var pathParts = currentResource.split('/');
        var form = pathParts[pathParts.length - 1];
        var payload = {};
        var referrer = document.referrer;
        var formOverlay = !!window.location.pathname.match(/.+\.formoverlay\..+/);
        var isRedirected = $('.inpagesuccess').length === 0;
        payload.message = 'Form successfully submitted.';
        payload.data = extractGcdmData($event.data.thankYouContent);
        payload.extra = {};
        payload.extra.from = currentResource;
        payload.extra.form = form;
        payload.extra.cosyUrl = getGuideModelCosyUrlValue();
        payload.extra.preferedTime = getGuideModelPreferedTimeValue();
        payload.extra.serviceType = getGuideModelPreferedServiceValue();
        payload.extra.contactReason = getGuideModelContactReasonValue();
        payload.extra.tracking = trackingData;
        payload.extra.vehicle = guidelib.bf.tracking.vehicle;
        payload.extra.component = trackingComponentData;
        payload.extra.adobeDataLayer = window.adobeDataLayer;
        payload.referrer = referrer;
        payload.formOverlay = formOverlay;
        payload.extra.monitoring = true;
        guideBridge.trigger('successfulSubmissionEvent', [successPageRedirect, payload, isRedirected]);
    }

    /**
     * Extract GCDM data from URL
     * @author eggs unimedia GmbH info@eggs.de
     * @param path
     * @return {any}
     * @private
     */
    function extractGcdmData(path) {
        var params = getUrlVars(path);
        var gcdmData = params.gcdmData;
        return JSON.parse(gcdmData);
    }
    /**
     * Resolve URL variables
     * @author eggs unimedia GmbH info@eggs.de
     * @param path
     * @return {any}
     * @private
     */
    function getUrlVars(path) {
        var params = {};
        path.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
            params[key] = value && typeof value.replaceAll === 'function' && decodeURIComponent(value.replaceAll('+', ' '));
        });
        return params;
    }

    /**
     * Add selector to the passed path if it is a MINI path
     * @author eggs unimedia GmbH info@eggs.de
     * @param path
     * @return {path}.onlyBody
     * @private
     */
    function addSelector(path) {
        return path.startsWith('/content/MINI') ? path.concat('.onlyBody') : path;
    }

    /**
     * If a cosyy IMage is shown then read from guidemodel via guideBridge.visit the CossyImageUrl
     * @author eggs unimedia GmbH info@eggs.de
     * @return cosyIMage URL
     * @private
     */
    function getGuideModelCosyUrlValue() {
        var cosyURL = '';
        guideBridge.visit(function (a) {
            if (a.className === 'guideCosyImage' && a.jsonModel.url && !cosyURL) {
                (cosyURL = a.jsonModel.url);
            }
        });
        return cosyURL;
    }

    /**
     * read from guidemodel via guideBridge.visit. The field must be
     * guideDropDownList and name of field must be datepicker_appointment_time_dropdown to work.
     * @author eggs unimedia GmbH info@eggs.de
     * @return prefered time word
     * @private
     */
    function getGuideModelPreferedTimeValue() {
        var preferedTime = '';
        guideBridge.visit(function (a) {
            // if we have a prefered time dropdown
            if (((a.className === 'guideDropDownList' && a.jsonModel.name === 'datepicker_appointment_time_dropdown')
                || (a.className === 'guideRadioButton' && a.jsonModel.name === 'datepicker_appointment_time_radio'))
            && a.jsonModel.options && a.jsonModel._value) {
                preferedTime = a.jsonModel.options.find(function (time) { return time.startsWith(a.jsonModel._value); });
                if (preferedTime) {
                    // check if label available
                    var values = preferedTime.split('=');
                    preferedTime = values.length > 1 ? values[1] : values[0];
                }
            }
        });
        return preferedTime;
    }

    /**
     * find service category dropdown
     * @author eggs unimedia GmbH info@eggs.de
     * @return dropdown value for service category
     * @private
     */
    function getGuideModelPreferedServiceValue() {
        var dropdownValue = '';
        guideBridge.visit(function (a) {
            if ((a.className === 'guideDropDownList' && a.jsonModel.name === 'dropdownlist_servicecategory')
                && a.jsonModel.options && a.jsonModel._value) {
                dropdownValue = getDropdownValue(a);
            }
        });
        return dropdownValue;
    }

    /**
     * read contact reason dropdown value
     * @author eggs unimedia GmbH info@eggs.de
     * @return dropdown value for contact reason
     * @private
     */
    function getGuideModelContactReasonValue() {
        var dropdownValue = '';
        guideBridge.visit(function (a) {
            if ((a.className === 'guideDropDownList' && a.jsonModel.name === 'dropdownlist_contactreason')
                && a.jsonModel.options && a.jsonModel._value) {
                dropdownValue = getDropdownValue(a);
            }
        });
        return dropdownValue;
    }

    /**
     * get corresponding dropdown value from the dropdown
     * @author eggs unimedia GmbH info@eggs.de
     * @return dropdown value
     * @private
     */
    function getDropdownValue(obj) {
        var preferedValue = obj.jsonModel.options.find(function (parsedValue) { return parsedValue.startsWith(obj.jsonModel._value); });
        if (preferedValue) {
            var values = preferedValue.split('=');
            preferedValue = values.length > 1 ? values[1] : values[0];
        }
        return preferedValue;
    }
}

/**
 * This function checks if a date is inside the min and max age parameters of the field
 *
 * @author eggs unimedia GmbH info@eggs.de
 * @name validateMinAge Date validation allowed age span
 * @param birthdateName Birthday date field name
 * @return {boolean} this value is true if the given date is inside the allowed array or empty, false otherwise
 */
function validateMinAge(birthdateName) {
    var isValidAge = false;
    var age = null;

    var birthdayField = guideBridge.resolveNode(birthdateName);

    if (birthdayField.value) {
        var ageDifMs = new Date().getTime() - new Date(birthdayField.value).getTime() - (24 * 60 * 60 * 1000);
        var ageDate = new Date(ageDifMs);
        age = ageDate.getUTCFullYear() - 1970;
    }

    if (age < 0 || !birthdayField.value) {
        birthdayField.validateExpMessage = birthdayField.initialValidateExpMessage;
    } else if (age < parseInt(birthdayField.options.jsonModel._minimumAge, 10)) {
        birthdayField.validateExpMessage = birthdayField.options.jsonModel._minimumAgeValidationMessage;
    } else if (age >= parseInt(birthdayField.options.jsonModel._maximumAge, 10)) {
        birthdayField.validateExpMessage = birthdayField.options.jsonModel._maximumAgeValidationMessage;
    }

    if (age === null) {
        isValidAge = true;
    } else if (age >= parseInt(birthdayField.options.jsonModel._maximumAge, 10) && age >= 0) {
        isValidAge = false;
    } else if (age < parseInt(birthdayField.options.jsonModel._minimumAge, 10) && age >= 0) {
        isValidAge = false;
    } else if (age < 0) {
        isValidAge = false;
    } else {
        isValidAge = true;
    }

    return isValidAge;
}

/**
 * This function calculates the end date for the given number of days added to the current day
 *
 * @name getDateForTimeSpan Date with added Days
 * @author eggs unimedia GmbH info@eggs.de
 * @param input Days or Date
 * @return {*} A String with calculated date
 */
function getDateForTimeSpan(input) {
    var formattedDate = getDateByInput(input);
    if (formattedDate) {
        formattedDate = formattedDate.toISOString().split('T')[0];
    }
    return formattedDate;
}

/**
 * This function calculates the value for the 'plannedPurchaseScheduled' FDM Field
 * if it is empty (null or empty String) it will return null, for a number value it will return YES and for a String value like NaN it will return NO
 *
 * @name plannedPurchaseScheduled is purchase scheduled
 * @author eggs unimedia GmbH info@eggs.de
 * @param timeSpanInDays DropDown Value for the Field with the Timespan
 * @return {string}
 */
function plannedPurchaseScheduled(timeSpanInDays) {
    var isPlanned = null;
    if (timeSpanInDays === null || timeSpanInDays === '') {
        return isPlanned;
    }
    var delta = parseInt(timeSpanInDays, 10);
    if (Number.isInteger(delta) || Number.isInteger(Date.parse(timeSpanInDays))) {
        isPlanned = 'YES';
    } else {
        isPlanned = 'NO';
    }
    return isPlanned;
}

/**
 * This function resolves a date based on the input passed
 * @param input : days or date
 * @returns {date} or null
 */
function getDateByInput(input) {
    if (/^[\d]{4}-[\d]{2}-[\d]{2}$/ig.test(input)) {
        return new Date(input);
    }
    if (/^[\d]{1,4}$/ig.test(input)) {
        var purchaseRange = new Date();
        purchaseRange.setDate(purchaseRange.getDate() + parseInt(input, 10));
        return purchaseRange;
    }
    return null;
}

function Utils() {}

Utils.SUGGESTION_CONTAINER_CLASS = 'address-prefill__list';
Utils.SUGGESTION_CONTAINER_SELECTOR = '.address-prefill__list';
Utils.CHROME_LIST_ID = 'prefill-datalist';
Utils.SUGGESTION_ITEM_CLASS = 'address-prefill__option';
Utils.SUGGESTION_ITEM_SELECTOR = '.address-prefill__option';
Utils.PARENT_PANEL_CLASS = 'address-prefill';
Utils.PARENT_PANEL_SELECTOR = '.address-prefill';
Utils.DATALIST_TEMPLATE = '<datalist class="address-prefill__list">';
Utils.DATALIST_ITEM = '<option class="address-prefill__option">';
Utils.DIV_UL_TEMPLATE = '<div class="address-prefill__list" tabindex="0">';
Utils.LI_ITEM = '<li class="address-prefill__option">';
Utils.OPEN_CLASS = 'open';
Utils.OPEN_SELECTOR = '.open';
Utils.SELECTED_CLASS = 'selected';
Utils.SELECTED_SELECTOR = '.selected';
Utils.QUALITY_PROPERTY = 'quality';
Utils.DATA_LABEL_ATTR = 'data-label';
Utils.DATA_VALUE_ATTR = 'data-value';
Utils.TOLERANCE_RESULT_SIZE = 'resultListSize';
Utils.TOLERANCE_PROJECT = 'project';
Utils.TOLERANCE_VALIDATION_QUALITY_THRESHOLD = 'validationQualityThreshold';
Utils.TOLERANCE_AUTOFILLING_ENABLED = 'autoFillingEnabled';
Utils.TOLERANCE_EMPTY_ALL_ON_ZIP_CHANGE = 'emptyAllAddressFieldsWhenZipChanged';
Utils.TOLERANCE_AUTOCOMPLETION_PROFILE = 'profileAutocompletion';
Utils.TOLERANCE_VALIDATION_PROFILE = 'profileValidation';

/** Gets the substring before the last occurrence of a separator */
Utils.substringBeforeLast = function (str, separator) {
    if (Utils.isNotEmpty(str) && Utils.isNotEmpty(separator)) {
        var pos = str.lastIndexOf(separator);
        return pos === -1 ? str : str.substring(0, pos);
    }
    return str;
};
/** Gets the substring after the last occurrence of a separator */
Utils.substringAfterLast = function (str, separator) {
    if (Utils.isEmpty(str)) {
        return str;
    } if (Utils.isEmpty(separator)) {
        return '';
    }
    var pos = str.lastIndexOf(separator);
    return pos !== -1 && pos !== str.length() - separator.length() ? str.substring(pos + separator.length()) : '';
};
/** function checks the passed string for not empty */
Utils.isNotEmpty = function (item) {
    return item && item.length > 0;
};
/** function checks the passed integer value for not empty */
Utils.isNotEmptyInt = function (item) {
    return item && item > 0;
};
/** function checks the passed string for empty */
Utils.isEmpty = function (item) {
    return !Utils.isNotEmpty(item);
};
/** check for empty values in the passed array */
Utils.normalizeArray = function (array) {
    var temp = null;
    if (array instanceof Array && array.length > 0) {
        temp = [];
        array.forEach(function (el) {
            if (Utils.isNotEmpty(el)) temp.push(el);
        });
    }
    return temp;
};
/** check for empty array */
Utils.isValidArray = function (array) {
    return array instanceof Array && array.length > 0;
};
/** the intersection of both objects */
Utils.unionObjects = function (source, target) {
    var result = {};
    Object.keys(target).forEach(function (key) {
        result[key] = source[key];
    });
    return result;
};
/** only valid value is to return */
Utils.normalize = function (item) {
    return (item === undefined || item === null) ? '' : item;
};
/** the call of passed function with delay */
Utils.delay = function (handler, delay) {
    var instance = this;
    function handlerProxy() { return handler.apply(instance, arguments); }
    return setTimeout(handlerProxy, delay || 0);
};

/** The class to make the call to tolerant service */
function DataSupplier() {
    this.resultSize = guidelib.bf.tolerance[Utils.TOLERANCE_RESULT_SIZE];
    this.operationName = guidelib.bf.ws.Registry.BUSINESS_FORMS_TOLERANT_DATA_QUALITY_SERVICES$GET_PROJECT_PROFILE;
    this.resourcePath = guidelib.bf.form.resource;
    this.language = guidelib.bf.context.lang;
    this.project = guidelib.bf.tolerance[Utils.TOLERANCE_PROJECT];
}
/** call tolerant service */
DataSupplier.prototype.fetch = function (dto, serviceProfile, successCallback, errorCallback) {
    var operationInput = {
        project: this.project,
        profile: serviceProfile,
        serviceType: 'TOLERANT_SERVICE',
        currentResource: this.resourcePath,
        currentBrowserLanguage: this.language,
        maxResultCount: this.resultSize,
        filterResults: false,
        reqId: 1,
        postalcode: Utils.normalize(dto.postalcode),
        street: Utils.normalize(dto.street),
        number: Utils.normalize(dto.HouseNumber),
        houseNumber: Utils.normalize(dto.building),
        city: Utils.normalize(dto.city),
        subcity: Utils.normalize(dto.subcity),
        province: Utils.normalize(dto.province),
        locality: Utils.normalize(dto.locality),
        country: Utils.normalize(dto.countrycode),
        addressline2: Utils.normalize(dto.addressline2),
        addressline3: Utils.normalize(dto.addressline3),
    };
    guidelib.bf.ws.RemoteUtil.executeFDMOperation(this.operationName, operationInput, successCallback, errorCallback);
};

/** The class to manage the address model */
function DataModel(guideNodes, dto, dtoOnZipChange) {
    this.guideNodes = guideNodes;
    this.dto = dto;
    this.dtoOnZipChange = dtoOnZipChange;
}

DataModel.prototype.clearModel = function () {
    var currentInstance = this;
    Object.keys(this.dto).forEach(function (key) {
        currentInstance.guideNodes[key].resetData();
    });
};

DataModel.prototype.updateModel = function (baseModel, newModel, overrideValues) {
    if (newModel) {
        var currentInstance = this;
        var somExpressions = [];
        var values = [];
        Object.keys(baseModel).forEach(function (key) {
            if (overrideValues) {
                if (currentInstance.guideNodes[key]) {
                    // Force change on model level so that the view is forced to rerender.
                    somExpressions.push(currentInstance.guideNodes[key].somExpression);
                    somExpressions.push(currentInstance.guideNodes[key].somExpression);
                    values.push(null);
                    values.push(newModel[key]);
                }
            } else if (currentInstance.guideNodes[key] && currentInstance.guideNodes[key].value === null) {
                // Force change on model level so that the view is forced to rerender.
                somExpressions.push(currentInstance.guideNodes[key].somExpression);
                somExpressions.push(currentInstance.guideNodes[key].somExpression);
                values.push(null);
                values.push(newModel[key]);
            }
        });
        guideBridge.setProperty(somExpressions, 'value', values);
    }
};

DataModel.prototype.getCurrentModel = function () {
    var currentInstance = this;
    var temp = Object.assign({}, this.dto);
    Object.keys(this.dto).forEach(function (key) {
        if (currentInstance.guideNodes[key]) temp[key] = Utils.normalize(currentInstance.guideNodes[key].value);
    });
    return temp;
};

/** the class to manage user input */
function AddressAutocompleteInput(config, dto, dataModel, dataSupplier) {
    this.options = {};
    this.dtoTemplate = dto;
    this.dataModel = dataModel;
    this.dataSupplier = dataSupplier;
    this.inputEventDelay = 500;
    this.searching = 0;
    this.options.name = config.name;
    this.options.labelNames = config.labelNames;
    this.options.minLength = Utils.isNotEmptyInt(config.minLength) ? config.minLength : 2;
    this.options.isAutofill = config.isAutofill;
    this.options.id = config.id;
    this.options.panelId = config.panelId;
    this.options.resolveMultiValue = config.resolveMultiValue;
    this.options.multiValueCriteria = config.multiValueCriteria;
    this.toleranceProfile = guidelib.bf.tolerance[Utils.TOLERANCE_AUTOCOMPLETION_PROFILE];
    this.quality_threshold = guidelib.bf.tolerance[Utils.TOLERANCE_VALIDATION_QUALITY_THRESHOLD];
    this.autoFillingEnabled = guidelib.bf.tolerance[Utils.TOLERANCE_AUTOFILLING_ENABLED];
    this.emptyAllAddressFieldsWhenZipChanged = guidelib.bf.tolerance[Utils.TOLERANCE_EMPTY_ALL_ON_ZIP_CHANGE];
    this.$element = $('input#'.concat(this.options.id).concat('_widget'));
    if (this.$element.length === 1) {
        this.init();
    } else {
        console.warn('The element with passed id ['.concat(this.options.id).concat('] was not found!'));
    }

    // used in order to determine if the user selected a value from the autocomplete menu
    window.guidelib.bf.isAddressAutocompleted = null;
}

AddressAutocompleteInput.prototype.init = function () {
    this.handleAutofillBehaviour();
    this.$element.parent().addClass(Utils.PARENT_PANEL_CLASS);
    this.menuComponent = new AddressAutocompleteMenu({
        isAutofill: this.options.isAutofill,
        panelId: this.options.panelId,
    }, this);

    $('#'.concat(this.options.panelId)).attr('tabindex', '-1');
    this.initEvents();
};

AddressAutocompleteInput.prototype.initEvents = function () {
    this.$element.on('input', this.onInput.bind(this));
    this.$element.on('keyup', this.onKeyUp.bind(this));
    this.$element.on('click', this.onClick.bind(this));
};

// E V E N T    H A N D L E R S

AddressAutocompleteInput.prototype.onInput = function (event) {
    this.resolveCase(event);
};

AddressAutocompleteInput.prototype.onKeyUp = function (event) {
    // in case empty functionality is enabled
    if (this.emptyAllAddressFieldsWhenZipChanged) {
        // and the zip field has been manually changed by the user by typing characters (not by navigating inside the field)
        if (this.$element[0].name === 'zip') {
            if (event.keyCode !== undefined // autocomplete menu option selected
                && event.keyCode !== 37 // left arrow key pressed
                && event.keyCode !== 39 // right arrow key pressed
                && event.keyCode !== 16 // shift key pressed
                && event.shiftKey !== true) { // shift pressed (ie. for Shift+Tab)
                // get the empty data model without the zip code
                // and send the object with empty fields to be validated using AEM GuideBridge
                this.dataModel.updateModel(this.dataModel.dtoOnZipChange, this.dataModel.dtoOnZipChange, true);
            }
        }
    }
};

AddressAutocompleteInput.prototype.onClick = function () {
    // in case there is data to be autofilled
    if (window.autoFillingStoredValue !== null) {
        // fill in the fields and validate using AEM GuideBridge
        this.dataModel.updateModel(this.dataModel.dto, window.autoFillingStoredValue, false);

        // empty the autofill value, so we won't get the user in an infinite loop if he tries to delete the value from an input field
        window.autoFillingStoredValue = null;
    }
};

// H E L P E R S

AddressAutocompleteInput.prototype.handleAutofillBehaviour = function () {
    if (this.options.isAutofill) {
        this.$element.attr('list', Utils.CHROME_LIST_ID.concat('_').concat(this.options.name));
    } else {
        this.$element.attr('autocomplete', 'off');
    }
};

AddressAutocompleteInput.prototype.resolveCase = function (event) {
    var tempValue = this.$element.val();

    if (this.validTerm(tempValue)) {
        if (this.isInput(event, tempValue)) {
            this.onSearch(event, tempValue);
        } else if (this.isSelect(event, tempValue)) {
            this.onSelect(event, tempValue);
        } else {
            console.warn('<<<<< U N D E F I N E D  C A S E >>>>>');
        }
    }
};

AddressAutocompleteInput.prototype.isInput = function (event, term) {
    return this.isInputEvent(event) && Utils.isNotEmpty(term);
};

AddressAutocompleteInput.prototype.isSelect = function (event, term) {
    return !this.isInputEvent(event) && Utils.isNotEmpty(term);
};

AddressAutocompleteInput.prototype.isInputEvent = function (event) {
    return event.originalEvent instanceof InputEvent;
};

AddressAutocompleteInput.prototype.onSearch = function (event, term) {
    this.menuComponent.collapse();
    var currentInstance = this;
    this.currentSearchTerm = term;
    clearTimeout(this.searching);
    this.searching = Utils.delay(function () {
        currentInstance.search(term, function (response) {
            if (currentInstance.responseDataValid(response)
                && currentInstance.currentSearchTerm === currentInstance.$element.val()
                && currentInstance.$element.is(':focus')
            ) {
                var result = currentInstance.checkResultForQuality(response.results);

                // in case tolerant retrieves the region code as the province attribute (i.e. for Japan),
                // map the province attribute value to the province code field
                result.forEach(function (item) {
                    if (item.province && !item.provincecode) {
                        item.provincecode = item.province;
                    }
                });

                currentInstance.menuComponent.fillMenu(currentInstance.generateSuggestionList(result));
                currentInstance.menuComponent.show();

                if (currentInstance.autoFillingEnabled) {
                    currentInstance.runAutoFilling(response);
                }
            }
        }, this.onError);
    }, this.inputEventDelay);
};

AddressAutocompleteInput.prototype.search = function (term, successCallback, errorCallback) {
    var searchModel = this.dataModel.getCurrentModel();
    searchModel[this.options.name] = term;
    this.dataSupplier.fetch(searchModel, this.toleranceProfile, successCallback, errorCallback);
};

AddressAutocompleteInput.prototype.onSelect = function (event, term) {
    var resolvedOption = this.menuComponent.getByLabel(term);
    this.menuComponent.collapse();
    // if select from suggestion list
    if (resolvedOption.length) {
        var dataValue = $(resolvedOption[0]).attr(Utils.DATA_VALUE_ATTR);
        this.updateModel(this.dataModel.dto, dataValue, true);
    }
    // if select from autofill
    if (!resolvedOption.length && this.isMulti(term)) {
        this.resolveMultiValue(term);
    }
};

AddressAutocompleteInput.prototype.isMulti = function (term) {
    return this.options.resolveMultiValue
        && this.options.multiValueCriteria
        && this.options.multiValueCriteria.test(term);
};

AddressAutocompleteInput.prototype.resolveMultiValue = function (term) {
    var currentInstance = this;
    clearTimeout(this.searching);
    this.searching = Utils.delay(function () {
        currentInstance.search(term, function (response) {
            if (currentInstance.responseDataValid(response) && currentInstance.checkResultForQuality(response.results)) {
                var resultPassedQualityCheck = currentInstance.checkResultForQuality(response.results);

                if (resultPassedQualityCheck.length > 0) {
                    // in case tolerant retrieves the region code as the province attribute (i.e. for Japan),
                    // map the province attribute value to the province code field
                    resultPassedQualityCheck.forEach(function (item) {
                        if (item.province && !item.provincecode) {
                            item.provincecode = item.province;
                        }
                    });
                    currentInstance.updateModel(currentInstance.dataModel.dto, currentInstance.generateSuggestionList(resultPassedQualityCheck)[0].value, true);
                }
            }
        }, this.onError);
    }, this.inputEventDelay);
};

AddressAutocompleteInput.prototype.getMenuComponent = function () {
    return this.menuComponent;
};

AddressAutocompleteInput.prototype.getElement = function () {
    return this.$element;
};

// Possible TODO: in order to get proper results for the suggestions list, a new quality threshold rq-setting should be added
AddressAutocompleteInput.prototype.checkResultForQuality = function (list) {
    return list;

    // var listToReturn = [];
    // var currentInstance = this;
    //
    // list.forEach(function(item) {
    //     var quality = 0;
    //     try {
    //         quality = Number.parseFloat(item[Utils.QUALITY_PROPERTY]);
    //     } catch(ex) {
    //         console.warn(ex)
    //     }
    //
    //     //if (quality !== Number.NaN && quality > currentInstance.quality_threshold) {
    //     if (quality !== Number.NaN && quality > 50) {
    //         listToReturn.push(item);
    //     }
    // });
    //
    // return listToReturn;
};

AddressAutocompleteInput.prototype.validTerm = function (term) {
    return term && (term.length >= this.options.minLength);
};

AddressAutocompleteInput.prototype.onError = function (error) {
    console.error(error);
};

AddressAutocompleteInput.prototype.responseDataValid = function (responseData) {
    return responseData && (!!responseData.resultCount);
};

AddressAutocompleteInput.prototype.generateSuggestionList = function (resultList) {
    var currentInstance = this;
    var result = [];
    resultList.forEach(function (item) {
        var temp = {
            label: currentInstance.buildLabel(item),
            value: currentInstance.buildValue(item),
        };
        result.push(temp);
    });

    // remove duplicated results based on the label being unique
    var filteredResult = [];
    $.each(result, function (key, value) {
        var exists = false;
        $.each(filteredResult, function (key2, value2) {
            if (value.label === value2.label) {
                exists = true;
            }
        });
        if (exists === false) {
            filteredResult.push(value);
        }
    });

    return filteredResult;
};

AddressAutocompleteInput.prototype.buildLabel = function (resultItem) {
    var result = resultItem[this.options.name];
    var currentInstance = this;
    if (Utils.isValidArray(this.options.labelNames)) {
        var temp = [];
        this.options.labelNames.forEach(function (key) {
            if (Utils.isNotEmpty(resultItem[key]) && currentInstance.options.name !== key) temp.push(resultItem[key]);
        });
        var labelItems = Utils.normalizeArray(temp);
        if (labelItems) {
            result = result.concat(' (').concat(labelItems.join(', ')).concat(')');
        }
    }
    return result;
};

window.autoFillingStoredValue = null;

AddressAutocompleteInput.prototype.runAutoFilling = function (response) {
    var currentInstance = this;

    // if more results have been returned than the maximum allowed, we don't save the results
    if (response.resultOverflow) {
        window.autoFillingStoredValue = null;
        return;
    }

    // if any of the returned results is below the quality threshold, we don't save the results
    for (var i = 0; i < response.results.length - 1; i++) {
        if (response.results[i].quality < currentInstance.quality_threshold) {
            window.autoFillingStoredValue = null;
            return;
        }
    }

    // if only one result comes back from Tolerant and its quality is above the quality threshold, we save the result
    if (response.results.length === 1 && response.results[0].quality >= currentInstance.quality_threshold) {
        window.autoFillingStoredValue = response.results[0];
    } else /* here we know there are fewer results than the maximum allowed, but more than one */ {
        window.autoFillingStoredValue = this.checkForIdenticalDataAndCreateStorableItem(response.results);
    }
};

AddressAutocompleteInput.prototype.checkForIdenticalDataAndCreateStorableItem = function (results) {
    var propertyOkay;
    var storableObject = {};

    // we iterate through each address property one by one
    $.each(results[0], function (name, value) {
        // we assume the address property should be autofilled
        propertyOkay = 1;

        // we iterate through all the results, comparing their property with the same property of all the following results in the dataset
        for (var j = 0; j < results.length - 1; j++) {
            for (var i = j + 1; i < results.length; i++) {
                // if we find that the property of another result is different from this result's property or the property is empty
                if (results[j][name] !== results[i][name] || results[j][name] === '') {
                    // we establish the property is not meeting the criteria for being autofilled
                    propertyOkay = 0;
                    break;
                }
            }

            if (propertyOkay === 0) {
                break;
            }
        }

        if (propertyOkay) {
            storableObject[name] = value;
        }
    });

    return storableObject;
};

AddressAutocompleteInput.prototype.buildValue = function (resultItem) {
    var result = Utils.unionObjects(resultItem, this.dtoTemplate);
    return JSON.stringify(result);
};

AddressAutocompleteInput.prototype.updateModel = function (baseTemplate, dataValue, overrideValues) {
    var selectedModel = JSON.parse(dataValue);
    this.dataModel.updateModel(baseTemplate, selectedModel, overrideValues);
};

AddressAutocompleteInput.prototype.append = function ($menu) {
    $menu.appendTo(this.$element.parent());
};

AddressAutocompleteInput.prototype.setInput = function (value) {
    this.$element.val(value);
};

AddressAutocompleteInput.prototype.refresh = function () {
    if (Utils.isNotEmpty(this.currentSearchTerm)) this.$element.val(this.currentSearchTerm);
};

AddressAutocompleteInput.prototype.name = function () {
    return this.options.name;
};

/** the class to manage the suggestion menu */
function AddressAutocompleteMenu(config, input) {
    this.options = {};
    this.options.isAutofill = config.isAutofill;
    this.options.panelId = config.panelId;
    this.inputComponent = input;
    if (this.inputComponent) {
        this.init();
    } else {
        console.warn("The autocomplete menu can't be created. The configuration is wrong!");
    }
}

AddressAutocompleteMenu.prototype.init = function () {
    if (this.options.isAutofill) {
        this.createMenu4chrome();
    } else {
        this.createMenu4other();
    }
    this.initEvents();
};

AddressAutocompleteMenu.prototype.createMenu4chrome = function () {
    this.$element = $(Utils.DATALIST_TEMPLATE).attr({ id: Utils.CHROME_LIST_ID.concat('_').concat(this.inputComponent.name()) });
    this.inputComponent.append(this.$element);
};

AddressAutocompleteMenu.prototype.createMenu4other = function () {
    this.$element = $(Utils.DIV_UL_TEMPLATE);
    $('<ul>').appendTo(this.$element);
    this.inputComponent.append(this.$element);
};

AddressAutocompleteMenu.prototype.createItem = function (itemData) {
    var result;
    if (this.options.isAutofill) result = this.createItem4chrome(itemData);
    else result = this.createItem4other(itemData);
    return result;
};

AddressAutocompleteMenu.prototype.createItem4chrome = function (itemData) {
    return $(Utils.DATALIST_ITEM).attr({ 'data-value': itemData.value, 'data-label': itemData.label }).text(itemData.label);
};

AddressAutocompleteMenu.prototype.createItem4other = function (itemData) {
    var result = $(Utils.LI_ITEM).attr({ 'data-value': itemData.value, 'data-label': itemData.label });
    $('<span>').text(itemData.label).appendTo(result);
    return result;
};

AddressAutocompleteMenu.prototype.initEvents = function () {
    this.$element.on('mousemove', this.activateItem.bind(this));
    this.$element.on('click', '.address-prefill__option.selected', this.select.bind(this));
    $(document).on('keydown', this.onKeydown.bind(this));
    $(document).on('click', this.onClick.bind(this));
};

// E V E N T    H A N D L E R S

AddressAutocompleteMenu.prototype.onClick = function (event) {
    if (window.guidelib.bf.isAddressAutocompleted === null) {
        window.guidelib.bf.isAddressAutocompleted = true;
    }

    if (!$(event.target).closest(this.$element).length) {
        if (this.isOpen()) {
            this.collapse();
            this.inputComponent.refresh();
        }
    }
};

AddressAutocompleteMenu.prototype.activateItem = function (event) {
    event.stopPropagation();
    var actualTarget = $(event.target).closest('li.address-prefill__option');
    if (actualTarget.hasClass(Utils.SELECTED_CLASS)) {
        return;
    }
    actualTarget.siblings().removeClass(Utils.SELECTED_CLASS);
    actualTarget.addClass(Utils.SELECTED_CLASS);
    this.onFocus(actualTarget);
};

// H E L P E R S

AddressAutocompleteMenu.prototype.onKeydown = function (event) {
    if (this.isOpen()) this.keydown(event);
};

AddressAutocompleteMenu.prototype.keydown = function (event) {
    // eslint-disable-next-line default-case
    switch (event.keyCode) {
    case $.ui.keyCode.UP:
        this.previous(event);
        break;
    case $.ui.keyCode.DOWN:
        this.next(event);
        break;
    case $.ui.keyCode.ENTER:
        this.select(event);
        break;
    case $.ui.keyCode.ESCAPE:
        this.collapse();
        break;
    case $.ui.keyCode.TAB:
        this.collapse();
        break;
    }
};

AddressAutocompleteMenu.prototype.previous = function (event) {
    this.selectItem(event, 'prev');
};

AddressAutocompleteMenu.prototype.next = function (event) {
    this.selectItem(event, 'next');
};

AddressAutocompleteMenu.prototype.select = function (event) {
    this.onSelect(event);
};

AddressAutocompleteMenu.prototype.collapse = function () {
    this.hide();
    this.clear();
};

AddressAutocompleteMenu.prototype.onSelect = function (event) {
    var selectedOption = this.$element.find('.address-prefill__option.selected');
    if (selectedOption.length === 1) {
        var selected = selectedOption.attr(Utils.DATA_LABEL_ATTR);
        this.inputComponent.onSelect(event, selected);
    }
};

AddressAutocompleteMenu.prototype.show = function () {
    this.$element.parent(Utils.PARENT_PANEL_SELECTOR).addClass(Utils.OPEN_CLASS);
};

AddressAutocompleteMenu.prototype.hide = function () {
    this.$element.parent(Utils.PARENT_PANEL_SELECTOR).removeClass(Utils.OPEN_CLASS);
};

AddressAutocompleteMenu.prototype.isOpen = function () {
    return this.$element.parent(Utils.PARENT_PANEL_SELECTOR).hasClass(Utils.OPEN_CLASS);
};

AddressAutocompleteMenu.prototype.onFocus = function (target) {
    var selectedLabel = $(target).attr(Utils.DATA_LABEL_ATTR);
    this.inputComponent.setInput(selectedLabel);
};

AddressAutocompleteMenu.prototype.clear = function () {
    if (this.options.isAutofill) {
        this.$element.empty();
    } else {
        this.$element.find('ul').empty();
    }
};

AddressAutocompleteMenu.prototype.destroy = function () {
    this.$element.remove();
    this.$element = null;
};

AddressAutocompleteMenu.prototype.isDestroyed = function () {
    return this.$element === null;
};

AddressAutocompleteMenu.prototype.selectItem = function (event, direction) {
    var actualTarget;
    var pseudoClass = direction === 'next' ? 'first-child' : 'last-child';
    if (!this.$element.find('.address-prefill__option').hasClass(Utils.SELECTED_CLASS)) {
        actualTarget = this.$element.find('.address-prefill__option:'.concat(pseudoClass));
    } else {
        actualTarget = this.$element.find('.address-prefill__option.'.concat(Utils.SELECTED_CLASS))[direction]();
        if (!actualTarget.length) {
            actualTarget = this.$element.find('.address-prefill__option:'.concat(pseudoClass));
        }
        actualTarget.siblings().removeClass(Utils.SELECTED_CLASS);
    }
    actualTarget.addClass(Utils.SELECTED_CLASS);
    this.onFocus(actualTarget);
};

AddressAutocompleteMenu.prototype.fillMenu = function (list) {
    var currentInstance = this;
    var result = [];
    if (list.length) {
        list.forEach(function (element) {
            var item = currentInstance.createItem(element);
            result.push(item);
        });
        this.append(result);
    }
};

AddressAutocompleteMenu.prototype.append = function (list) {
    var appendElement = this.options.isAutofill ? this.$element : this.$element.find('ul');
    list.forEach(function (element) { element.appendTo(appendElement); });
};

AddressAutocompleteMenu.prototype.isEmpty = function () {
    var list = this.options.isAutofill ? this.$element.children() : this.$element.find('ui').children();
    return list.length === 0;
};

AddressAutocompleteMenu.prototype.getByLabel = function (label) {
    var selector = this.options.isAutofill ? 'option' : 'li';
    selector = selector.concat('[data-label="').concat(label).concat('"]');
    return this.$element.find(selector);
};

AddressAutocompleteMenu.prototype.findByLabel = function (label) {
    var selector = this.options.isAutofill ? 'option' : 'li';
    selector = selector.concat('[data-label^="').concat(label).concat('"]');
    return this.$element.find(selector);
};

AddressAutocompleteMenu.prototype.getAllItems = function () {
    return this.$element.find(Utils.SUGGESTION_ITEM_SELECTOR);
};

/** The module to manage the address validation */
function AddressValidationProcessor(panelId, requiredFields, guideNodes, dataSupplier) {
    this.panelId = panelId;
    this.quality_threshold = guidelib.bf.tolerance[Utils.TOLERANCE_VALIDATION_QUALITY_THRESHOLD];
    this.requiredFields = requiredFields;
    this.guideNodes = guideNodes;
    this.dataSupplier = dataSupplier;
    this.toleranceProfile = guidelib.bf.tolerance[Utils.TOLERANCE_VALIDATION_PROFILE];
    this.disableDLOPrefill = guidelib.bf.context.disableDLOPrefill;
    this.DLOPrefillZip = guidelib.bf.context.DLOPrefillZip;
    this.DLOPrefillCity = guidelib.bf.context.DLOPrefillCity;
    this.DLOPrefillStreet = guidelib.bf.context.DLOPrefillStreet;
    this.DLOPrefillHouseNumber = guidelib.bf.context.DLOPrefillHouseNumber;
    this.DLOPrefillRegionCode = guidelib.bf.context.DLOPrefillRegionCode;
    this.DLOPrefillCountry = guidelib.bf.context.DLOPrefillCountry;
    this.init();
}
/** This function manages the address validation (facade function) */
AddressValidationProcessor.prototype.validateAddress = function () {
    if (this.enoughDataForDLO()) {
        this.sendAddressDataToDLO();
    }
    if (this.isAddressFormValidationSuccess()) {
        this.executeToleranceValidation();
    }
};
/** The function checks the for dlo needed data for existence */
AddressValidationProcessor.prototype.enoughDataForDLO = function () {
    return (!this.guideNodes.postalcode.isEmpty() && this.guideNodes.postalcode.isValid)
        || (!this.guideNodes.city.isEmpty() && this.guideNodes.city.isValid);
};
/** The function checks the validation status of the given address fields */
AddressValidationProcessor.prototype.isAddressFormValidationSuccess = function () {
    var currentInstance = this;
    var status = true;
    this.requiredFields.forEach(function (key) {
        status = !currentInstance.guideNodes[key].isEmpty() && Boolean(currentInstance.guideNodes[key].isValid) && status;
    });
    return status;
};
/** The function executes the address validation against the tolerant service */
AddressValidationProcessor.prototype.executeToleranceValidation = function () {
    var currentInstance = this;
    var dto = this.buildInput4Tolerance();
    this.dataSupplier.fetch(dto, this.toleranceProfile, function (responseData) {
        var checkStatus;
        try {
            var resultCount = responseData.resultCount;
            var errorMsg = responseData.errorMsg;
            if (errorMsg !== 'OK') throw errorMsg;
            if (Boolean(resultCount > 0) && currentInstance.foundByQualityThreshold(responseData.results)) {
                checkStatus = ['true', 'true'];
            } else {
                console.error('The current address does not correspond to the desired quality!');
            }
        } catch (err) {
            console.warn('tolerance validation: ', err);
            checkStatus = ['false', 'true'];
        }
        currentInstance.setValidationProperties(checkStatus);
    },
    function (response, err) {
        console.warn(err);
    });
};
/** The function sets values into the validation guide fields  */
AddressValidationProcessor.prototype.setValidationProperties = function (input) {
    var somExpressions4Validation = [];
    var values = [];
    if (this.guideNodes.checked && this.guideNodes.isValidated) {
        somExpressions4Validation.push(this.guideNodes.checked.somExpression);
        somExpressions4Validation.push(this.guideNodes.isValidated.somExpression);
        values.push(input[0]);
        values.push(input[1]);
    }
    guideBridge.setProperty(somExpressions4Validation, 'value', values);
};
/** the function checks the result items for quality */
AddressValidationProcessor.prototype.foundByQualityThreshold = function (list) {
    var currentInstance = this;
    var status = false;
    list.forEach(function (item) {
        var quality = 0;
        try {
            quality = Number.parseFloat(item[Utils.QUALITY_PROPERTY]);
        } catch (ex) {
            console.warn(ex);
        }
        if (!Number.isNaN(quality) && quality > currentInstance.quality_threshold) {
            status = true;
        }
    });
    return status;
};
/** the function creates the input for the tolerance validation service */
AddressValidationProcessor.prototype.buildInput4Tolerance = function () {
    var currentInstance = this;
    var result = {};
    this.requiredFields.forEach(function (key) {
        if (currentInstance.guideNodes[key]) {
            result[key] = currentInstance.guideNodes[key].value;
        }
    });
    return result;
};
/** The function send the street, house number, postal code and city to DLO component */
AddressValidationProcessor.prototype.sendAddressDataToDLO = function () {
    const currentInstance = this;
    if (!this.disableDLOPrefill) {
        var DLOInputString = currentInstance.buildDLOInputString();
        if (DLOInputString !== null) {
            window.dloaas.api.triggerEvent('searchLocation', { searchTerm: DLOInputString });
        }
    }
};
/** The Function creates the input string for DLO */
AddressValidationProcessor.prototype.buildDLOInputString = function () {
    const currentInstance = this;
    const tempArray = [];
    var inputStringIsValid = true;

    if (this.DLOPrefillZip) {
        if (currentInstance.guideNodes.postalcode && currentInstance.guideNodes.postalcode.value) {
            tempArray.push(Utils.normalize(currentInstance.guideNodes.postalcode.value));
        } else {
            inputStringIsValid = false;
        }
    } else if (currentInstance.guideNodes.postalcode && currentInstance.guideNodes.postalcode.value) {
        tempArray.push(Utils.normalize(currentInstance.guideNodes.postalcode.value));
    }

    if (this.DLOPrefillCity) {
        if (currentInstance.guideNodes.city && currentInstance.guideNodes.city.value) {
            tempArray.push(Utils.normalize(currentInstance.guideNodes.city.value));
        } else {
            inputStringIsValid = false;
        }
    } else if (currentInstance.guideNodes.city && currentInstance.guideNodes.city.value) {
        tempArray.push(Utils.normalize(currentInstance.guideNodes.city.value));
    }

    if (this.DLOPrefillStreet) {
        if (currentInstance.guideNodes.street && currentInstance.guideNodes.street.value) {
            tempArray.push(Utils.normalize(currentInstance.guideNodes.street.value));
        } else {
            inputStringIsValid = false;
        }
    } else if (currentInstance.guideNodes.street && currentInstance.guideNodes.street.value) {
        tempArray.push(Utils.normalize(currentInstance.guideNodes.street.value));
    }

    if (this.DLOPrefillHouseNumber) {
        if (currentInstance.guideNodes.HouseNumber && currentInstance.guideNodes.HouseNumber.value) {
            tempArray.push(Utils.normalize(currentInstance.guideNodes.HouseNumber.value));
        } else {
            inputStringIsValid = false;
        }
    } else if (currentInstance.guideNodes.HouseNumber && currentInstance.guideNodes.HouseNumber.value) {
        tempArray.push(Utils.normalize(currentInstance.guideNodes.HouseNumber.value));
    }

    if (this.DLOPrefillRegionCode) {
        if (currentInstance.guideNodes.provincecode && currentInstance.guideNodes.provincecode.value) {
            tempArray.push(Utils.normalize(currentInstance.guideNodes.provincecode.value));
        } else {
            inputStringIsValid = false;
        }
    } else if (currentInstance.guideNodes.provincecode && currentInstance.guideNodes.provincecode.value) {
        tempArray.push(Utils.normalize(currentInstance.guideNodes.provincecode.value));
    }

    if (this.DLOPrefillCountry) {
        if (currentInstance.guideNodes.countrycode && currentInstance.guideNodes.countrycode.value) {
            tempArray.push(Utils.normalize(currentInstance.guideNodes.countrycode.value));
        } else {
            inputStringIsValid = false;
        }
    } else if (currentInstance.guideNodes.countrycode && currentInstance.guideNodes.countrycode.value) {
        tempArray.push(Utils.normalize(currentInstance.guideNodes.countrycode.value));
    }

    if (!inputStringIsValid) {
        return null;
    }

    return tempArray.join(' ');
};
/** Register listener for the address validation (there are to validation modes) */
AddressValidationProcessor.prototype.init = function () {
    $('#'.concat(this.panelId)).on('blur', '*', _.debounce(function (event) {
        if (!$(event.delegateTarget).is(':focus-within')) {
            guideBridge._guide.trigger('AddressValidation');
        } else if (window.guidelib.bf.isAddressAutocompleted) {
            guideBridge._guide.trigger('AddressValidation');
            window.guidelib.bf.isAddressAutocompleted = false;
        }
    }, 200, false));
};

/**
 * This function manages address request and suggestions behavior
 *
 * @name manageAddressServices Manage Address Services
 * @author eggs unimedia GmbH info@eggs.de
 * @param maxResultCount max result count field
 * @param profileField address profile field
 * @param typeField address type field
 * @param streetField street field
 * @param numberField house number field
 * @param zipField zip code field
 * @param cityField city field
 * @param countryField country field
 * @param regionCodeField region code field
 * @param districtNameField district name field
 * @param houseNameField house name field
 * @param strSuppl1Field str suppl 1 field
 * @param strSuppl2Field str suppl 2 field
 */
function manageAddressServices(maxResultCount, profileField, typeField, streetField, numberField, zipField,
    cityField, countryField, regionCodeField, districtNameField, houseNameField,
    strSuppl1Field, strSuppl2Field) {
    var guideNodes = {
        // address items
        HouseNumber: undefined,
        postalcode: undefined,
        city: undefined,
        subcity: undefined,
        province: undefined,
        provincecode: undefined,
        locality: undefined,
        street: undefined,
        building: undefined,
        countrycode: undefined,
        addressline2: undefined,
        addressline3: undefined,
        // additional items
        checked: undefined,
        isValidated: undefined,
    };

    var requiredFields = [];
    var usedFieldsInForm = [];

    var BINDREF_POSTAL_CODE = '/MultiOfferResponse/businessPartner/addresses/addresses/postalCode';
    var BINDREF_CITY = '/MultiOfferResponse/businessPartner/addresses/addresses/city';
    var BINDREF_STREET = '/MultiOfferResponse/businessPartner/addresses/addresses/street';
    var BINDREF_HOUSE_NUMBER = '/MultiOfferResponse/businessPartner/addresses/addresses/houseNumber';
    var BINDREF_HOUSE_ID = '/MultiOfferResponse/businessPartner/addresses/addresses/additionalHouseID';
    var BINDREF_COUNTRY = '/MultiOfferResponse/businessPartner/addresses/addresses/country';
    var BINDREF_LOCATION = '/MultiOfferResponse/businessPartner/addresses/addresses/location';
    var BINDREF_REGION_CODE = '/MultiOfferResponse/businessPartner/addresses/addresses/regionCode';
    var BINDREF_DISTRICT_NAME = '/MultiOfferResponse/businessPartner/addresses/addresses/districtName';
    var BINDREF_STREET_SUPPL_ONE = '/MultiOfferResponse/businessPartner/addresses/addresses/strSuppl1';
    var BINDREF_STREET_SUPPL_TWO = '/MultiOfferResponse/businessPartner/addresses/addresses/strSuppl2';
    var BINDREF_CHECKED = '/MultiOfferResponse/businessPartner/addresses/addresses/addressChecked';
    var BINDREF_IS_ADDRESS_VALIDATED = '/MultiOfferResponse/_metadata/isAddressValidated';

    // init guideNodes
    guideBridge.visit(function (component) {
        // eslint-disable-next-line default-case
        switch (component.bindRef) {
        case BINDREF_POSTAL_CODE:
            guideNodes.postalcode = component;
            usedFieldsInForm.push('postalcode');

            if (guideNodes.postalcode.mandatory) requiredFields.push('postalcode');
            break;
        case BINDREF_CITY:
            guideNodes.city = component;
            usedFieldsInForm.push('city');

            if (guideNodes.city.mandatory) requiredFields.push('city');
            break;
        case BINDREF_STREET:
            guideNodes.street = component;
            usedFieldsInForm.push('street');

            if (guideNodes.street.mandatory) requiredFields.push('street');
            break;
        case BINDREF_HOUSE_NUMBER:
            guideNodes.HouseNumber = component;
            usedFieldsInForm.push('HouseNumber');

            if (guideNodes.HouseNumber.mandatory) requiredFields.push('HouseNumber');
            break;
        case BINDREF_HOUSE_ID:
            guideNodes.building = component;
            usedFieldsInForm.push('building');

            if (guideNodes.building.mandatory) requiredFields.push('building');
            break;
        case BINDREF_COUNTRY:
            guideNodes.countrycode = component;

            requiredFields.push('countrycode');
            break;
        case BINDREF_REGION_CODE:
            guideNodes.provincecode = component;
            guideNodes.province = component;
            usedFieldsInForm.push('provincecode');
            usedFieldsInForm.push('province');

            if (guideNodes.provincecode.mandatory) requiredFields.push('provincecode');
            if (guideNodes.province.mandatory) requiredFields.push('province');
            break;
        case BINDREF_DISTRICT_NAME:
            guideNodes.subcity = component;
            usedFieldsInForm.push('subcity');

            if (guideNodes.subcity.mandatory) requiredFields.push('subcity');
            break;
        case BINDREF_STREET_SUPPL_ONE:
            guideNodes.addressline2 = component;
            usedFieldsInForm.push('addressline2');
            break;
        case BINDREF_STREET_SUPPL_TWO:
            guideNodes.addressline3 = component;
            usedFieldsInForm.push('addressline3');
            break;
        case BINDREF_IS_ADDRESS_VALIDATED:
            guideNodes.isValidated = component;
            break;
        case BINDREF_CHECKED:
            guideNodes.checked = component;
            break;
        case BINDREF_LOCATION:
            guideNodes.locality = component;
            usedFieldsInForm.push('locality');

            if (guideNodes.locality.mandatory) requiredFields.push('locality');
            break;
        }
    });

    var dto4tolerant = {
        HouseNumber: undefined,
        postalcode: undefined,
        city: undefined,
        subcity: undefined,
        province: undefined,
        provincecode: undefined,
        locality: undefined,
        street: undefined,
        building: undefined,
        countrycode: countryField,
        addressline2: undefined,
        addressline3: undefined,
    };

    var dto4emptyOnZipChange = {
        HouseNumber: undefined,
        city: undefined,
        subcity: undefined,
        province: undefined,
        provincecode: undefined,
        locality: undefined,
        street: undefined,
        building: undefined,
        countrycode: countryField,
        addressline2: undefined,
        addressline3: undefined,
    };

    var isAutofill = !!window.chrome;
    var panelId = guideNodes.postalcode.panel.id;
    var dataSupplier = new DataSupplier();
    var modelHandler = new DataModel(guideNodes, dto4tolerant, dto4emptyOnZipChange);

    var addressValidator = new AddressValidationProcessor(panelId, requiredFields, guideNodes, dataSupplier);

    var autocompletePLZ = new AddressAutocompleteInput({
        name: 'postalcode',
        labelNames: usedFieldsInForm,
        id: guideNodes.postalcode.id,
        minLength: 2,
        isAutofill: isAutofill,
        panelId: panelId,
    }, dto4tolerant, modelHandler, dataSupplier);

    var autocompleteCity = new AddressAutocompleteInput({
        name: 'city',
        labelNames: usedFieldsInForm,
        id: guideNodes.city.id,
        minLength: 2,
        isAutofill: isAutofill,
        panelId: panelId,
    }, dto4tolerant, modelHandler, dataSupplier);

    var autocompleteStreet = new AddressAutocompleteInput({
        name: 'street',
        labelNames: usedFieldsInForm,
        id: guideNodes.street.id,
        minLength: 2,
        isAutofill: isAutofill,
        panelId: panelId,
        resolveMultiValue: true,
        multiValueCriteria: /\d+/g,
    }, dto4tolerant, modelHandler, dataSupplier);

    var autocompleteStreetNumber = new AddressAutocompleteInput({
        name: 'HouseNumber',
        labelNames: usedFieldsInForm,
        id: guideNodes.HouseNumber.id,
        minLength: 1,
        isAutofill: isAutofill,
        panelId: panelId,
    }, dto4tolerant, modelHandler, dataSupplier);

    guideBridge._guide.on('AddressValidation', addressValidator.validateAddress.bind(addressValidator));
}

guidelib.bf.func.VehicleSelection = (function ($, _) {
    var COMPOSITE_KEY_SEPARATOR = '|';

    // eslint-disable-next-line no-undef
    var matrixOperationCache = new Map();

    /**
         * @name _executeMatrixOperation executes a PDH matrix webservice operation with the given inputs
         * @param serviceType
         * @param restriction
         * @private
         */
    function _executeMatrixOperation(serviceType, restriction) {
        var key = _createCompositeKey([].concat(serviceType, restriction));
        var promise = matrixOperationCache.get(key);
        if (!promise) {
            promise = new Promise(function (resolve, reject) {
                var operationInfo = guidelib.bf.ws.Registry.BUSINESS_FORMS_PDH_SERVICES$GET_MATRIX_TENANT_DATAVERSION;
                var inputs = {
                    tenant: guidelib.bf.context.tenant,
                    dataversion: 'latest',
                    serviceType: serviceType,
                    currentResource: guidelib.bf.form.resource,
                };
                if (restriction) {
                    inputs.restriction = JSON.stringify(restriction);
                }
                try {
                    guidelib.bf.ws.RemoteUtil.executeFDMOperation(operationInfo, inputs, function (responseJson) {
                        resolve(responseJson);
                    }, function (xhr, errorPayload) {
                        matrixOperationCache.delete(key);
                        reject(errorPayload);
                    });
                } catch (ex) {
                    reject(ex.message);
                }
            });
            matrixOperationCache.set(key, promise);
        }
        return promise;
    }

    /**
         * @name _executeMatrixOperation executes a PDH matrix webservice that sets the dropdown options on success
         * @param serviceType
         * @param restriction
         * @return {OPTIONS} list of dropdown options
         * @private
         */
    function _executeMatrixDropdownOperation(serviceType, restriction) {
        var currentTarget = guidelib.runtime.guide.runtime.$event.target;
        _executeMatrixOperation(serviceType, restriction).then(
            function (items) {
                currentTarget.items = items;
                if (items.length === 1) {
                    currentTarget.value = items[0].split('=')[0];
                    currentTarget.executeExpression('valueCommit');
                }
            } // eslint-disable-line comma-dangle
        );
        return currentTarget.items;
    }

    /**
         * Populates a combined vehicle series/model range dropdown
         *
         * @name populateOptionsSeriesRange Set Options of: Series / Range
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @return {OPTIONS} list of series dropdown options
         */
    function populateOptionsSeriesRange() {
        return _executeMatrixDropdownOperation('PDH_SERIES_RANGE');
    }

    /**
         * Populates a model dropdown for a given series and model range
         *
         * @name populateOptionsModelBySeriesRange Set Options of: Models for Series/Range
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @param {?string} series Select a field containing the currently selected series code
         * @param {?string} modelRange Select a field containing the currently selected model range code
         * @return {OPTIONS} list of model dropdown options, empty if model range is empty
         */
    function populateOptionsModelBySeriesRange(series, modelRange) {
        modelRange = _trimToNull(modelRange);
        series = _trimToNull(series);
        if (!modelRange) {
            return [];
        }
        return _executeMatrixDropdownOperation('PDH_MODEL_BY_RANGE', [series, modelRange]);
    }

    /**
         * Populates a model range dropdown for a given series
         *
         * @name populateOptionsModelRangeBySeries Set Options of: Model Range for Series
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @param {?string} series Select a field containing the currently selected series code
         * @return {OPTIONS} list of model dropdown options, empty if model range is empty
         */
    function populateOptionsModelRangeBySeries(series) {
        series = _trimToNull(series);
        if (!series) {
            return [];
        }
        return _executeMatrixDropdownOperation('PDH_RANGE_BY_SERIES', [series]);
    }

    /**
         * Populates a model dropdown for a given model range
         *
         * @name populateOptionsModelBySeriesRangeCombined Set Options of: Models for Series/Range combined
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @param {?string} seriesModelRange Select a field containing the currently selected series and model range code
         * @return {OPTIONS} list of model dropdown options, empty if model range is empty
         */
    function populateOptionsModelBySeriesRangeCombined(seriesModelRange) {
        seriesModelRange = _trimToNull(seriesModelRange);
        var series = _getCompositeKeyPart(seriesModelRange, 0);
        var modelRange = _getCompositeKeyPart(seriesModelRange, 1);
        return populateOptionsModelBySeriesRange(series, modelRange);
    }

    /**
         * Populates a combined model range / model dropdown for a given series
         *
         * @name populateOptionsRangeModel Set Options of: Model Range / Model for Series
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @param {?string} series Select a field containing the currently selected series code
         * @return {OPTIONS} list of model range dropdown options, empty if series is empty
         */
    function populateOptionsRangeModel(series) {
        if (!series || series.trim().length === 0) {
            return [];
        }
        return _executeMatrixDropdownOperation('PDH_RANGE_MODEL', [series]);
    }

    /**
         *
         * @param modelRange
         * @param model
         * @return {Promise}
         * @private
         */
    function _completeVehicleCodes(modelRange, model) {
        modelRange = _trimToNull(modelRange);
        model = _trimToNull(model);
        if (modelRange || model) {
            var restriction = [null, modelRange, model];
            return _executeMatrixOperation('PDH_BREADCRUMB', restriction);
        }
        return Promise.reject();
    }

    /**
     * Sets the selected series, model range and model depending on the given URL query parameters when fragment without PDH is used.
     *
     * @name preselectVehicleFromQueryWithoutPdh Preselect Vehicle according to URL query parameters without PDH
     * @memberof guidelib.bf.func.VehicleSelection
     * @author eggs unimedia GmbH info@eggs.de
     */
    function preselectVehicleFromQueryWithoutPdh() {
        var modelRange = window.guidelib.bf.ParameterUtils.getQueryParams('modelRange', decodeURIComponent(window.location.href));
        var currentTarget = guidelib.runtime.guide.runtime.$event.target;
        var newVehicleValue = '';

        if (modelRange !== null) {
            currentTarget.items.forEach(function (item) {
                if (item.split('|')[1] === modelRange) {
                    newVehicleValue = item.split('=')[0];
                }
            });
        }

        guideBridge.setProperty([currentTarget.name], 'value', [newVehicleValue]);

        // handle existance of separate model code dropdown
        var modelCode = window.guidelib.bf.ParameterUtils.getQueryParams('modelCode', decodeURIComponent(window.location.href));
        var modelCodeDropdown = guideBridge.resolveNode('vehicleselection_modelcode');
        var newModelCodeValue = '';

        if (modelCode !== null) {
            modelCodeDropdown.items.forEach(function (item) {
                if (item.split('|')[1] === modelCode) {
                    newModelCodeValue = item.split('=')[0];
                }
            });
        }

        guideBridge.setProperty([modelCodeDropdown.name], 'value', [newVehicleValue]);

        var cosyData = {
            modelCode: newVehicleValue.split('|')[2],
            cosyBrand: newVehicleValue.split('|')[3],
        };

        guidelib.runtime.guide.trigger('bfCoSyData', cosyData);
    }

    /**
         * Sets the selected series, model range and model depending on the given URL query parameters.
         *
         * @name preselectVehicleFromQuery Preselect Vehicle according to URL query parameters
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         */
    function preselectVehicleFromQuery() {
        var ParameterUtils = guidelib.bf.ParameterUtils;
        var modelRange = ParameterUtils.getQueryParams('modelRange', window.location.href);
        var modelCode = ParameterUtils.getQueryParams('modelCode', window.location.href);
        var optionalEquipment = ParameterUtils.getQueryParams('optionalEquipment', window.location.href);

        if ((modelRange || modelCode) && !optionalEquipment) {
            if (guidelib.bf.vehicleSelection !== undefined) {
                guidelib.bf.vehicleSelection.isPrefilledFromQuery = true;
            } else {
                guidelib.bf.vehicleSelection = { isPrefilledFromQuery: true };
            }
            _preselectVehicle(modelRange, modelCode);
        }
    }

    /**
         * If the form was Prefilled from Query this function returns true else it is false
         *
         * @name isPrefilledFromQuery Is prefilled from query
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @return {boolean} true if it was prefilled from query
         */
    function isPrefilledFromQuery() { // eslint-disable-line consistent-return
        if (guidelib.bf.vehicleSelection !== undefined) {
            var isPrefilled = guidelib.bf.vehicleSelection.isPrefilledFromQuery;
            if (isPrefilled !== undefined) {
                return isPrefilled;
            }
        } else {
            var ParameterUtils = guidelib.bf.ParameterUtils;
            var modelRange = ParameterUtils.getQueryParams('modelRange', window.location.href);
            var modelCode = ParameterUtils.getQueryParams('modelCode', window.location.href);
            var optionalEquipment = ParameterUtils.getQueryParams('optionalEquipment', window.location.href);
            return ((modelRange || modelCode) && !optionalEquipment);
        }
    }

    /**
         * Sets the selected series, model range and model depending on request from product page (for mini)
         *
         * @name preselectVehicleFromProductPageEvent Preselect Vehicle
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         */
    function preselectVehicleFromProductPageEvent() {
        // TODO: no more used
    }

    /**
         * Sets the selected series, model range and model
         *
         * @name _preselectVehicle Sets the selected series, model range and model
         * @param modelRangeCode
         * @param modelCode
         * @private
         */
    function _preselectVehicle(modelRangeCode, modelCode) {
        _completeVehicleCodes(modelRangeCode, modelCode).then(function (value) {
            if (value.length > 0) {
                $('.guideFieldDescription.short').each(function () {
                    var $self = $(this);
                    var id = $(this).attr('id').substring(0, $(this).attr('id').indexOf('___'));
                    if ($(document).find('#' + id + '__').hasClass('hideUserNotificationIfPrefilled')) {
                        $self.remove();
                    }
                });

                var series = value[0];
                modelRangeCode = value[1];
                var payload = {
                    series: series,
                    modelRange: modelRangeCode,
                    seriesAndModelRange: _createCompositeKey([series, modelRangeCode]),
                };
                if (modelCode) {
                    payload.modelCode = modelCode;
                    payload.rangeAndModelCode = _createCompositeKey([modelRangeCode, modelCode]);
                }
                // noinspection JSAccessibilityCheck
                var eventToTrigger = 'vehicleSelection';
                if (guidelib.runtime.guide.runtime.$event) {
                    eventToTrigger = eventToTrigger.concat(guidelib.bf.func.Repeatable.getEventExtension(guidelib.runtime.guide.runtime.$event.target));
                }
                guidelib.runtime.guide.trigger(eventToTrigger, payload);
            }
        });
    }

    /**
         * @param code
         * @param operationInfo
         * @param inputParamName
         * @param cache
         * @return {Promise<any>}
         * @private
         */
    function _retrieveRangeOrModelVehicleData(code, operationInfo, inputParamName, cache) {
        code = code && code.trim();
        if (!code) {
            return Promise.resolve(null);
        }
        var promise = cache.get(code);
        if (!promise) {
            promise = new Promise(function (resolve, reject) {
                var inputs = {
                    tenant: guidelib.bf.context.tenant,
                    dataversion: 'latest',
                };
                inputs[inputParamName] = code;
                guidelib.dataIntegrationUtils.executeOperation(operationInfo, inputs, {}, function (payload) {
                    resolve(JSON.parse(payload));
                }, function (xhr, errorPayload) {
                    reject(errorPayload);
                });
            }).catch(function () {
                cache.delete(code);
                return Promise.reject();
            });
            cache.set(code, promise);
        }
        return promise;
    }

    var modelRangeCache = new Map(); // eslint-disable-line no-undef

    /**
         * Retrieve data for the selected model range
         * <p>
         * @name _retrieveModelRangeData Retrieve Consumption and Emission Data for Model Range
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {?string} modelRangeCode Select a field containing the currently selected Model Range Code
         * @return {Promise<RangeAggregated>} Promise containing the model range data
         * @private
         */
    function _retrieveModelRangeData(modelRangeCode) {
        return _retrieveRangeOrModelVehicleData(modelRangeCode,
            guidelib.bf.ws.Registry.BUSINESS_FORMS_PDH_SERVICES$GET_RANGEAGGREGATED_TENANT_DATAVERSION_RANGE,
            'range', modelRangeCache);
    }

    var modelCache = new Map(); // eslint-disable-line no-undef

    /**
         * Retrieve data for the selected model
         * <p>
         * @name _retrieveModelData Retrieve Consumption and Emission Data for Model
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {?string} modelCode Select a field containing the currently selected Model Code
         * @return {Promise<Model>} Promise containing the model data
         * @private
         */
    function _retrieveModelData(modelCode) {
        return _retrieveRangeOrModelVehicleData(modelCode,
            guidelib.bf.ws.Registry.BUSINESS_FORMS_PDH_SERVICES$GET_MODEL_TENANT_DATAVERSION_MODEL,
            'model', modelCache);
    }

    var latestVehicleRequest = null;

    /**
         * Retrieve vehicle data
         * <p>
         * @name retrieveVehicleData Retrieve Vehicle Data
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {?string} series Select a field containing the currently selected series
         * @param {?string} modelRange Select a field containing the currently selected model range
         * @param {?string} model Select a field containing the currently selected model
         * @return {string} current value of the field
         */
    function retrieveVehicleData(series, modelRange, model) { // eslint-disable-line consistent-return
        var executeRetrieveVehicleData = (guidelib.bf.vehicleSelection !== undefined) ? !guidelib.bf.vehicleSelection.isPrefilledByApp : true;
        if (executeRetrieveVehicleData) {
            var currentEventTarget = guidelib.runtime.guide.runtime.$event.target;
            series = _trimToNull(series);
            modelRange = _trimToNull(modelRange);
            model = _trimToNull(model);
            var currentVehicleRequest = _createCompositeKey([series, modelRange, model]);
            latestVehicleRequest = currentVehicleRequest;
            Promise.all([
                _retrieveModelRangeData(modelRange),
                _retrieveModelData(model),
            ]).then(function (values) {
                if (latestVehicleRequest === currentVehicleRequest) {
                    // Propagate values to fields via vehicleConfig event
                    var modelRangeData;
                    if (Array.isArray(values[0])) {
                        modelRangeData = values[0][0];
                    } else {
                        modelRangeData = values[0];
                    }
                    var modelData = values[1];

                    var payload = {
                        noCRM: true,
                        series: series,
                        modelRange: modelRange,
                        modelCode: model,
                    };
                    if (modelRangeData) {
                        _.extend(payload,
                            {
                                brandGcdm: guidelib.bf.BrandUtils.convertPdhToGcdm(modelRangeData.brand),
                                modelName: modelRangeData.description,
                                bodyCode: modelRangeData.code,
                                fuelType: modelRangeData.fuelType,
                            },
                            _getCrmAdjustedDataForRange(modelRangeData));
                    }
                    if (modelData) {
                        _.extend(payload,
                            {
                                brandGcdm: guidelib.bf.BrandUtils.convertPdhToGcdm(modelData.brand),
                                modelCode: modelData.code,
                                modelCodeAG: modelData.originalCode,
                                modelName: modelData.name,
                            },
                            _getCrmAdjustedDataForModel(modelData));
                    }
                    if (modelData == null && modelRangeData == null) {
                        _.extend(payload,
                            {
                                brandGcdm: null,
                                modelName: null,
                                bodyCode: null,
                            });
                    }
                    var eventToTrigger = 'vehicleConfig';
                    eventToTrigger = eventToTrigger.concat(guidelib.bf.func.Repeatable.getEventExtension(currentEventTarget));
                    guidelib.runtime.guide.trigger(eventToTrigger, payload);

                    // Cosy image handling
                    var shownModel;
                    if (modelRangeData) {
                        shownModel = modelRangeData.defaultAGModelCode;
                        payload.cosyBrand = modelRangeData.cosyBrand;
                        if (modelRangeData.posiSpec) {
                            payload.cosyBrand = modelRangeData.posiSpec.cosyBrand;
                            payload.agCode = modelRangeData.posiSpec.agCode;
                            payload.paint = modelRangeData.posiSpec.paint;
                            payload.fabric = modelRangeData.posiSpec.fabric;
                            payload.sa = modelRangeData.posiSpec.options;
                        }
                    }
                    if (modelData) {
                        shownModel = modelData.originalCode;
                        payload.cosyBrand = modelData.cosyBrand;
                        if (modelData.posiSpec) {
                            payload.cosyBrand = modelData.posiSpec.cosyBrand;
                            payload.agCode = modelData.posiSpec.agCode;
                            payload.paint = modelData.posiSpec.paint;
                            payload.fabric = modelData.posiSpec.fabric;
                            payload.sa = modelData.posiSpec.options;
                        }
                    }
                    if (shownModel) {
                        payload.modelCode = shownModel;
                    }
                    // Emission and consumption data
                    // noinspection JSCheckFunctionSignatures
                    var emissionConsumptionData = _.chain({
                        source: modelData ? 'model' : modelRangeData ? 'modelRange' : 'none', // eslint-disable-line no-nested-ternary
                    }).extend(modelRangeData, modelData)
                        .pick('source', 'hybridCode', 'technicalDataMin', 'technicalDataMax', 'drivingCycle')
                        .value();

                    // find repeating parent
                    var repeatingParent = currentEventTarget;
                    while (repeatingParent != null) {
                        if (repeatingParent instanceof guidelib.model.GuidePanel) {
                            if (repeatingParent.repeatable) {
                                break;
                            }
                        }
                        repeatingParent = repeatingParent.parent;
                    }
                    if (repeatingParent == null) {
                        // if no repeating parent, throw global event that is caught by any GuideCosyImage guide model
                        eventToTrigger = 'bfCoSyData';
                        eventToTrigger = eventToTrigger.concat(guidelib.bf.func.Repeatable.getEventExtension(currentEventTarget));
                        guidelib.runtime.guide.trigger(eventToTrigger, payload);

                        // if no repeating parent, throw global event that is caught by any GuideEmissionConsumption
                        // guide model
                        eventToTrigger = 'emissionConsumptionData';
                        eventToTrigger = eventToTrigger.concat(guidelib.bf.func.Repeatable.getEventExtension(currentEventTarget));
                        guidelib.runtime.guide.trigger(eventToTrigger, emissionConsumptionData);
                    } else {
                        // if a repeating parent exists, update values of all GuideEmissionConsumption guide models
                        // contained within
                        repeatingParent.visit(function (node) {
                            if (node instanceof guidelib.model.GuideEmissionConsumption) {
                                node.value = JSON.stringify(emissionConsumptionData);
                            }
                            if (node instanceof guidelib.model.GuideCosyImage) {
                                node.altText = payload.modelName;
                                if (payload.url) {
                                    // URL is already set - skipping setters for properties to skip retrieving URL
                                    node.jsonModel.modelCode = payload.modelCode;
                                    node.jsonModel.brand = payload.cosyBrand;
                                    node.jsonModel.paint = payload.paint;
                                    node.jsonModel.fabric = payload.fabric;
                                    node.jsonModel.agCode = payload.agCode;
                                    node.jsonModel.sa = payload.options;
                                    node.url = payload.url;
                                } else {
                                    // URL needs to be retrieved - trigger change by using setters
                                    node.modelCode = payload.modelCode;
                                    node.brand = payload.cosyBrand;
                                    node.jsonModel.paint = payload.paint;
                                    node.jsonModel.fabric = payload.fabric;
                                    node.jsonModel.agCode = payload.agCode;
                                    node.sa = payload.options;
                                }
                            }
                        });
                    }
                }
            });
            return _createCompositeKey([series, modelRange, model]);
        }
    }

    /**
         * Retrieve data for combined series/model range and separate model
         *
         * @name retrieveVehicleDataSeriesAndModelRange Retrieve Vehicle Data for combined Series and Model Range
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {?string} seriesAndModelRange Select a field containing the currently selected series and model range
         * @param {?string} model Select a field containing the currently selected model
         * @return {string} current value of field
         */
    function retrieveVehicleDataSeriesAndModelRange(seriesAndModelRange, model) {
        seriesAndModelRange = seriesAndModelRange && seriesAndModelRange.trim();
        var series = _getCompositeKeyPart(seriesAndModelRange, 0);
        var modelRange = _getCompositeKeyPart(seriesAndModelRange, 1);
        return retrieveVehicleData(series, modelRange, model);
    }

    /**
         * Retrieve data for series and combined model range / model
         *
         * @name retrieveVehicleDataModelRangeAndModel Retrieve Vehicle Data for combined Model Range and Model
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {?string} series Select a field containing the currently selected series and model range
         * @param {?string} modelRangeAndModel Select a field containing the currently selected model
         * @return {string} current value of field
         */
    function retrieveVehicleDataModelRangeAndModel(series, modelRangeAndModel) {
        modelRangeAndModel = modelRangeAndModel && modelRangeAndModel.trim();
        var modelRange = _getCompositeKeyPart(modelRangeAndModel, 0);
        var model = _getCompositeKeyPart(modelRangeAndModel, 1);
        return retrieveVehicleData(series, modelRange, model);
    }

    /**
         * This function loads the fuel types with translations from guidelib.bf.vehicleselection.fuelType and remove unavailble values
         *
         * @name retrieveAvailableFuelTypes Retrieve available fuel types
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {?string} fuelTypes Fuel Types
         * @return {String[]}
         */
    function retrieveAvailableFuelTypes(fuelTypes) {
        var translatedFuelTypes = guidelib.bf.vehicleSelection.fuelType;
        var fuelTypesArray = fuelTypes.split(',');
        var availableFuelTypes = [];
        var currentTarget = guidelib.runtime.guide.runtime.$event.target;
        currentTarget.items = [];
        if (fuelTypesArray.length === 1 && currentTarget.className === 'guideRadioButton') {
            currentTarget.items = translatedFuelTypes;
            currentTarget.value = fuelTypesArray[0];
            currentTarget.visible = false;
        } else {
            fuelTypesArray.forEach(function (fuelType) {
                fuelType = fuelType.concat('=');
                var availableFuelType = translatedFuelTypes.find(function (translatedFuelType) {
                    return translatedFuelType.includes(fuelType);
                });
                if (availableFuelType) {
                    availableFuelTypes.push(availableFuelType);
                }
            });
        }
        return availableFuelTypes;
    }

    /**
         * This function sets in guidelib.bf a variable for the different fuel types setup in the item list for the possible fuel types
         *
         * @name setupFuelTypeValues Set possible fuel types with the translated language
         * @memberof guidelib.bf.func.VehicleSelection
         */
    function setupFuelTypeValues() {
        var currentTarget = guidelib.runtime.guide.runtime.$event.target;
        if (guidelib.bf.vehicleSelection) {
            guidelib.bf.vehicleSelection.fuelType = currentTarget.items;
        } else {
            guidelib.bf.vehicleSelection = { fuelType: currentTarget.items };
        }
    }

    /**
         * Return the amount of possible fuel Types.
         *
         * @name differentFuelTypes Amount of fuel Types
         * @memberof guidelib.bf.func.VehicleSelection
         * @param {string} fuelTypes Fuel Types
         * @return {Number}
         */
    function differentFuelTypes(fuelTypes) {
        return fuelTypes.split(',').length;
    }
    /**
         * @param {RangeAggregated} modelRange
         * @return {*}
         * @private
         */
    function _getCrmAdjustedDataForRange(modelRange) {
        switch (guidelib.bf.context.crmSystem) {
        case 'Carmen':
            return {
                modelRange: null,
                bodyCode: modelRange.code + '-' + modelRange.bodyTypeCode,
            };
        case 'Carmen_UK':
        case 'ELAINE':
            return {
                modelRange: null,
            };
        case 'TopDrive':
            return {
                modelCode: modelRange.defaultModelCode,
            };
        case 'SEM_Deep':
        case 'SEM_Light':
        default:
            return {};
        }
    }

    /**
         * @param model
         * @return {*}
         * @private
         */
    function _getCrmAdjustedDataForModel(model) {
        switch (guidelib.bf.context.crmSystem) {
        case 'Carmen':
        case 'Carmen_UK':
            return {
                bodyCode: null,
            };
        case 'ELAINE':
        case 'SEM_Light':
        case 'SEM_Deep':
        case 'TopDrive':
        default:
            return {};
        }
    }

    /**
         * Extracts a part of a composite key.
         *
         * The parts should be separated with the "|" pipe symbol.
         * If the composite key is not set, the extracted part will be null.
         *
         * @name _getCompositeKeyPart Get Part of a Composite Key
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @param {?string} compositeKey Select a drop-down field containing a composite key
         * @param {int} index Specify the index of the key, starting at 0
         * @return {string} nth part of the key
         * @private
         */
    function _getCompositeKeyPart(compositeKey, index) {
        return compositeKey ? compositeKey.split(COMPOSITE_KEY_SEPARATOR)[index] : null;
    }

    /**
         * Creates a composite key from parts.
         *
         * The parts will be separated with the "|" pipe symbol.
         * Parts with a null value will be represented by the empty string within the composite key.
         * If no parts are specified, the result wil be null.
         *
         * @name _createCompositeKey Create a composite key of several parts
         * @memberof guidelib.bf.func.VehicleSelection
         * @author eggs unimedia GmbH info@eggs.de
         * @param {string[]|null} parts of the composite key
         * @return {string} a composite key
         * @private
         */
    function _createCompositeKey(parts) {
        return parts.length === 0 ? null : parts.map(function (value) {
            return value === null ? '' : value;
        }).join(COMPOSITE_KEY_SEPARATOR);
    }

    /**
         * @name _trimToNull trims an input string, returns null for an empty strings
         * @param {?string} string
         * @return {string|null} trimmed string, or null if input is null or trimmed string is empty
         * @private
         */
    function _trimToNull(string) {
        if (!string) return null;
        string = string.trim();
        if (!string) return null;
        return string;
    }

    // noinspection JSUnusedGlobalSymbols
    return {
        // Populates a combined vehicle series/model range dropdown
        populateOptionsSeriesRange: populateOptionsSeriesRange,
        // Populates a model dropdown for a given model range/Series combined
        populateOptionsModelBySeriesRangeCombined: populateOptionsModelBySeriesRangeCombined,
        // Populates a combined model range / model dropdown for a given series
        populateOptionsRangeModel: populateOptionsRangeModel,
        // Populates a model range dropdown for a given series
        populateOptionsModelRangeBySeries: populateOptionsModelRangeBySeries,
        // Populates a model dropdown for a given series and model range
        populateOptionsModelBySeriesRange: populateOptionsModelBySeriesRange,
        preselectVehicleFromQueryWithoutPdh: preselectVehicleFromQueryWithoutPdh,
        preselectVehicleFromQuery: preselectVehicleFromQuery,
        preselectVehicleFromProductPageEvent: preselectVehicleFromProductPageEvent,
        retrieveVehicleData: retrieveVehicleData,
        retrieveVehicleDataSeriesAndModelRange: retrieveVehicleDataSeriesAndModelRange,
        retrieveVehicleDataModelRangeAndModel: retrieveVehicleDataModelRangeAndModel,
        retrieveAvailableFuelTypes: retrieveAvailableFuelTypes,
        setupFuelTypeValues: setupFuelTypeValues,
        differentFuelTypes: differentFuelTypes,
        isPrefilledFromQuery: isPrefilledFromQuery,
    };
}($, window._));

guidelib.bf.func.EmissionConsumption = (function () {
    /**
     * Determines if the Emission & Consumption component is contained in the same step as the current
     * component.
     *
     * Only works reliably for button components in toolbars listening to navigation events.
     *
     * @name isEmissionConsumptionStep Navigation: Is Emission & Consumption Component in the current step?
     * @memberof guidelib.bf.func.EmissionConsumption
     * @author eggs unimedia GmbH info@eggs.de
     * @return {boolean} true if emission/consumption component is contained in the current step.
     */
    function isEmissionConsumptionStep() {
        var hasEmissionConsumptionComponent = false;

        var currentTarget = guideBridge._guide.runtime.$event.target;
        if (currentTarget) {
            currentTarget.panel.navigationContext.currentItem.visit(function (item) {
                if (item.className === 'guideEmissionConsumption') {
                    hasEmissionConsumptionComponent = true;
                }
            });
        }
        return hasEmissionConsumptionComponent;
    }

    /**
         * Each EmissionConsumption is linked to the cosy image for the repeatable panel
         *
         * @name isEmissionConsumptionRepeatable isEmissionConsumptionRepeatable: Set EmissionConsumption component to repeatable state
         * @memberof guidelib.bf.func.EmissionConsumption
         * @author eggs unimedia GmbH info@eggs.de
         * @param {string} som Som string from the repeatable panel.
         */
    function isEmissionConsumptionRepeatable(som) {
        var emissionConsumptionSOM = guideBridge.resolveNode(som)._children.find(function (event) {
            return event.className === 'guideEmissionConsumption';
        }).somExpression;

        guideBridge.setProperty([emissionConsumptionSOM], 'linkCosy', 'repeatable');
    }

    // noinspection JSUnusedGlobalSymbols
    return {
        isEmissionConsumptionStep: isEmissionConsumptionStep,
        isEmissionConsumptionRepeatable: isEmissionConsumptionRepeatable,
    };
}());

/**
 * This function loads the brands used for current vehicle data from gcdm
 *
 * @name currentVehicleGetBrands Current Vehicle get Brands
 * @author eggs unimedia GmbH info@eggs.de
 * @param seriesDropdownName series dropdown field name
 * @return {OPTIONS} series dropdown options
 */
function currentVehicleGetBrands(seriesDropdownName) {
    var seriesNode = guideBridge.resolveNode(seriesDropdownName);
    var brandOptions = [];

    var operationInfo = guidelib.bf.ws.Registry.BUSINESS_FORMS_GCDM_CURRENT_VEHICLE$GET_CLIENTID_CLIENTVARIANTID_METADATA_VEHICLEBRANDS;

    var inputs = {
        clientId: guidelib.bf.context.clientId,
        clientVariantId: guidelib.bf.context.clientVariantId,
        locales: guidelib.bf.context.clientVariantId.split('-')[1],
        serviceType: 'GCDM_CURRENT_VEHICLE_BRANDS',
        currentResource: guidelib.bf.form.resource,
        currentBrowserLanguage: guidelib.bf.context.lang,
    };

    var outputs = {
        savedValue: 'vehicleBrandEntries.brand',
        displayedValue: 'vehicleBrandEntries.brandLabel',
    };

    guidelib.dataIntegrationUtils.executeOperation(operationInfo, inputs, outputs, function (wsdlOutput) {
        var model = this.callbackData;
        if (!_.isEmpty(wsdlOutput)) {
            var wsdlOutputObj = JSON.parse(wsdlOutput);
            for (var i = 0; i < wsdlOutputObj.vehicleBrandEntries.length; i++) {
                var currentBrand = wsdlOutputObj.vehicleBrandEntries[i];
                brandOptions[i] = currentBrand.brand + '=' + currentBrand.brandLabel;
            }
        }
        seriesNode.items = brandOptions;
    });
}

/**
 * This function checks if Modelrange or Model is mandatory; in that case it returns true, if not false
 *
 * @name currentVehicleBrandMandatory Current Vehicle Brand Mandatory
 * @author eggs unimedia GmbH info@eggs.de
 * @param brandDropdownName brand dropdown field name
 * @param rangeDropdownName model range dropdown field name
 * @param modelDropdownName model dropdown field name
 * @return {boolean} This value is true, if Modelrange or Model is mandatory
  */
function currentVehicleBrandMandatory(brandDropdownName, rangeDropdownName, modelDropdownName) {
    var brandNode = guideBridge.resolveNode(brandDropdownName);
    var modelRangeNode = guideBridge.resolveNode(rangeDropdownName);
    var modelNode = guideBridge.resolveNode(modelDropdownName);
    return brandNode.mandatory || modelRangeNode.mandatory || modelNode.mandatory;
}

/**
 * This function load the modelrange used for current vehicle data from gcdm
 *
 * @name currentVehicleGetModelRange Current Vehicle get model range
 * @author eggs unimedia GmbH info@eggs.de
 * @param seriesDropdownName brand dropdown name for current vehicle
 * @param rangeDropdownName model range dropdown name for current vehicle
 * @return {OPTIONS} Model range dropdown options
 */
function currentVehicleGetModelRange(seriesDropdownName, rangeDropdownName) {
    var modelRangeNode = guideBridge.resolveNode(rangeDropdownName);
    var seriesNode = guideBridge.resolveNode(seriesDropdownName);
    var currentResource = guidelib.bf.form.resource;

    if (modelRangeNode.visible === true && (([null, ''].indexOf(currentResource) === -1) && !seriesNode.isEmpty())) {
        var operationInfo = guidelib.bf.ws.Registry.BUSINESS_FORMS_GCDM_CURRENT_VEHICLE$GET_CLIENTID_CLIENTVARIANTID_METADATA_VEHICLETYPES;
        var inputs = {
            clientId: guidelib.bf.context.clientId,
            clientVariantId: guidelib.bf.context.clientVariantId,
            brand: seriesNode.value,
            locales: guidelib.bf.context.clientVariantId.split('-')[1],
            serviceType: 'GCDM_CURRENT_VEHICLE_TYPES',
            currentResource: currentResource,
            currentBrowserLanguage: guidelib.bf.context.lang,
        };
        var outputs = {
            savedValue: 'vehicleTypeEntries.series',
            displayedValue: 'vehicleTypeEntries.seriesLabel',
            field: modelRangeNode,
        };
        // guidelib.dataIntegrationUtils.setOptionsFromService(operationInfo, inputs, outputs);
        guidelib.dataIntegrationUtils.executeOperation(operationInfo, inputs, outputs, function (data) {
            var items = [];
            var results = JSON.parse(data);
            for (var i = 0; i < results.vehicleTypeEntries.length; i++) {
                var currentModelRange = results.vehicleTypeEntries[i];
                items[i] = currentModelRange.series + '=' + currentModelRange.seriesLabel;
            }
            modelRangeNode.items = items;
        });
    }
}

/**
 * This function sets the Mandatory attribute for Modelrange field in dependency to the Model
 *
 * @name currentVehicleMandatory current vehicle Modelrange mandatory
 * @author eggs unimedia GmbH info@eggs.de
 * @param rangeDropdownName model range dropdown field name
 * @param modelDropdownName model dropdown field name
 * @return {boolean} This value is true, if Modelrange or Model is mandatory
 */
function currentVehicleMandatory(rangeDropdownName, modelDropdownName) {
    var modelRangeNode = guideBridge.resolveNode(rangeDropdownName);
    var modelNode = guideBridge.resolveNode(modelDropdownName);
    var result = modelRangeNode.mandatory;
    if (!result) {
        result = modelNode.mandatory;
    }
    return result;
}

/**
 * This function loads the model corresponding to the modelrange for current vehicle data from gcdm
 *
 * @author eggs unimedia GmbH info@eggs.de
 * @name currentVehicleGetModel Current Vehicle get model
 * @param brandDropdownName series dropdown field name
 * @param rangeDropdownName model range dropdown field name
 * @param modelDropdownName model dropdown field name
 * @return {OPTIONS} model dropdown options
 */
function currentVehicleGetModel(brandDropdownName, rangeDropdownName, modelDropdownName) {
    var currentResource = guidelib.bf.form.resource;
    var brandNode = guideBridge.resolveNode(brandDropdownName);
    var modelRangeNode = guideBridge.resolveNode(rangeDropdownName);
    var modelNode = guideBridge.resolveNode(modelDropdownName);

    if (modelNode.visible === true && (([null, ''].indexOf(currentResource) === -1) && !brandNode.isEmpty() && !modelRangeNode.isEmpty())) {
        var operationInfo = guidelib.bf.ws.Registry.BUSINESS_FORMS_GCDM_CURRENT_VEHICLE$GET_CLIENTID_CLIENTVARIANTID_METADATA_VEHICLEMODELS;
        var inputs = {
            brand: brandNode.value,
            series: modelRangeNode.value,
            clientId: guidelib.bf.context.clientId,
            clientVariantId: guidelib.bf.context.clientVariantId,
            locales: guidelib.bf.context.clientVariantId.split('-')[1],
            serviceType: 'GCDM_CURRENT_VEHICLE_MODELS',
            currentResource: currentResource,
            currentBrowserLanguage: guidelib.bf.context.lang,
        };
        var outputs = {
            savedValue: 'vehicleModelEntries.model',
            displayedValue: 'vehicleModelEntries.modelLabel',
            field: modelNode,
        };
        guidelib.dataIntegrationUtils.executeOperation(operationInfo, inputs, outputs, function (wsdlOutput) {
            var modelOptions = [];
            if (!_.isEmpty(wsdlOutput)) {
                var wsdlOutputObj = JSON.parse(wsdlOutput);
                for (var i = 0; i < wsdlOutputObj.vehicleModelEntries.length; i++) {
                    var currentModel = wsdlOutputObj.vehicleModelEntries[i];
                    modelOptions[i] = currentModel.model + '=' + currentModel.modelLabel;
                }
            }
            modelNode.items = modelOptions;
        });
    }
}

/**
 * Set Value, Visible and Enabled transmitted via data of Postal topic
 *
 * @name subscribePostal Set Values of postal topic
 * @author eggs unimedia GmbH info@eggs.de
 * @param {string} somExpresion somExpression to set value
 * @param {string} topic Topic to subscribe to
 * @param {string} name Name of the value to write, otherwise name=value is suggested
 * @return {boolean} field was registered
 */
function subscribePostal(somExpresion, topic, name) {
    (function ($, guideBridge) {
        /* wait for document ready to hae require available */
        $(document).ready(function () {
            // eslint-disable-next-line import/no-dynamic-require, global-require
            require(['postal.aem-form'], function (postal) {
                var AF_CHANNEL = 'af';
                var formChannel = postal.channel(AF_CHANNEL);
                var valueName = name || 'value';
                // Set Value from outside
                var topicName = topic.concat(guidelib.bf.func.Repeatable.getEventExtension(guideBridge.resolveNode(somExpresion)));
                formChannel.subscribe(topicName, function (data) {
                    if (data[valueName]) {
                        guideBridge.setProperty([somExpresion], 'value', [data[valueName]]);
                    }
                }).enlistPreserved();
            });
        });
    }($, guideBridge));
}

/**
 * Set image url transmitted via data of of Postal topic
 *
 * @name subscribeGenericImagePostal Set Values of generic image topic
 * @author eggs unimedia GmbH info@eggs.de
 * @param {string} somExpresion somExpression to set value
 * @param {string} topic Topic to subscribe to
 * @param {string} name Name of the value to write, otherwise name=value is suggested
 * @return {boolean} field was registered
 */
function subscribeGenericImagePostal(somExpresion, topic, name) {
    (function ($, guideBridge) {
        /* wait for document ready to have require available */
        $(document).ready(function () {
            // eslint-disable-next-line import/no-dynamic-require, global-require
            require(['postal.aem-form'], function (postal) {
                var formChannel = postal.channel('af');
                var valueName = name || 'value';
                // Set Value from outside
                formChannel.subscribe(topic, function (data) {
                    if (data[valueName]) {
                        guideBridge.setProperty([somExpresion], 'imageUrl', [data[valueName]]);
                        $('.' + guideBridge.resolveNode(somExpresion).name).attr('src', data[valueName]);
                    }
                }).enlistPreserved();
            });
        });
    }($, guideBridge));
}

/**
 * Set Vehicle Configuration as JSON String transmitted via data of Postal topic
 *
 * @name setCRMData Set Vehicle Configuration as JSON String
 * @author eggs unimedia GmbH info@eggs.de
 * @param {string} somExpresion somExpression to set value
 * @param {string} topic Topic to subscribe to
 * @return {boolean} field was registered
 */
function setCRMData(somExpresion, topic) {
    var currentTarget = guidelib.runtime.guide.runtime.$event.target;
    guidelib.runtime.guide.on(topic, function (data) {
        if (data && !data.noCRM) {
            if (data.configId && window.guidelib.bf.conPath) data.configUrl = window.guidelib.bf.conPath.concat(data.configId);
            if (!somExpresion || currentTarget.somExpression === somExpresion) {
                var currentValue = currentTarget.value || '{}';
                var merged = Object.assign(JSON.parse(currentValue), data);
                currentTarget.value = JSON.stringify(merged);
                currentTarget.executeExpression('valueCommit');
            } else {
                merge(somExpresion, data);
            }
        }
    });
    return true;
}

/**
 * @private
 */
function merge(somExpression, data) {
    if (data) {
        var result = guideBridge.getElementProperty({
            propertyName: 'value',
            somExpressions: [somExpression],
        });
        if (result && result.data[0]) result = result.data[0];
        else result = '{}';
        result = Object.assign(JSON.parse(result), data);
        guideBridge.setProperty([somExpression], 'value', [JSON.stringify(result)]);
    }
}

/**
 * Set Visible and Enabled transmitted via data of Postal topic and send postal request to dlo
 *
 * @name setPostalDLO Set DLO and ifDealer Selected set visible and enabled of somExpresion
 * @author eggs unimedia GmbH info@eggs.de
 * @param {string} somExpresion somExpression to set visible and enabled
 * @param {string} topic Topic to subscribe to
 * @return {boolean} field was registered
 */
function setPostalDLO(somExpresion, topic) {
    (function ($, guideBridge, guidelib) {
        /* wait for document ready to hae require available */
        $(document).ready(function () {
            // eslint-disable-next-line import/no-dynamic-require, global-require
            require(['postal.provider'], function (postal) {
                var AF_CHANNEL = 'af';
                var formChannel = postal.channel(AF_CHANNEL);
                var node = guideBridge.resolveNode(somExpresion);
                // Set Value from outside
                formChannel.subscribe(topic, function (setDealerData) {
                    if (setDealerData.dealerId) {
                        // if a dealer is set change to setDealerData value, if no delaer is selected show locator
                        node.visible = setDealerData.visible !== false;
                        guideBridge.visit(function (cmp) {
                            if (cmp.cssClassName && cmp.cssClassName.split(/\s+/).indexOf('hideIfDealerPreset') > -1) {
                                cmp.visible = setDealerData.visible !== false;
                            }
                        });
                        node.enabled = setDealerData.enabled !== false;

                        // listen to selectDealer event
                        ((window.dloaas && window.dloaas.api) || window).addEventListener('dloaas.api.app.error', function (event) {
                            console.debug('***************DLO Error************', JSON.stringify(event.detail));
                            guideBridge.trigger('unresolveableErrorEvent', [guidelib.bf.form.defaultErrorPage,
                                {
                                    error: event.detail.errorId,
                                    message: event.detail.errorId,
                                    extra: event.detail.errorId,
                                }]);
                        });

                        // send dealer to DLO
                        if (window.dloaas && window.dloaas.api) {
                            try {
                                window.dloaas.api.triggerEvent('setSelectDealer', {
                                    dealerId: setDealerData.dealerId
                                });
                            } catch (e) {
                                console.log(e);
                            }
                        }
                    }
                });
            });
        });
    }($, guideBridge, guidelib));
    return true;
}

guidelib.bf.func.Events = (function () {
    /**
     * Set Value of Field to Named GuideBridge Event Payload Property
     * (also triggered by analogous postal event)
     *
     * @name setNamedValueOnEvent Register Handler: Set Value on Event to Named Property of it
     * @memberof guidelib.bf.func.Events
     * @author eggs unimedia GmbH info@eggs.de
     * @param {string} eventName Name of handled event
     * @param {string} [propertyName] Name of event payload property to assign
     * @return {string|boolean|number} current value of listening field
     */
    function setNamedValueOnEvent(eventName, propertyName) {
        var currentTarget = guidelib.runtime.guide.runtime.$event.target;
        var valueProperty = propertyName || currentTarget.name;
        var eventNamePrep = eventName.concat(guidelib.bf.func.Repeatable.getEventExtension(currentTarget));
        guidelib.runtime.guide.on(eventNamePrep, function (payload) {
            if (payload[valueProperty] !== undefined) {
                currentTarget.value = payload[valueProperty];
                currentTarget.executeExpression('valueCommit');
            }
        });
        return currentTarget.value;
    }

    /**
     * Set Value of Address Field to Named GuideBridge Event Payload Property
     * (also triggered by analogous postal event)
     *
     * @name setNamedAddressValueOnEvent Register Handler: Set Address Value on Event to Named Property of it
     * @memberof guidelib.bf.func.Events
     * @author eggs unimedia GmbH info@eggs.de
     * @param {string} eventName Name of handled event
     * @param {string} [propertyName] Name of event payload property to assign
     * @param {string} [addressContext] context of the address to be used
     * @return {string|boolean|number} current value of listening field
     */
    function setNamedAddressValueOnEvent(eventName, propertyName, addressContext) {
        var currentTarget = guidelib.runtime.guide.runtime.$event.target;

        guidelib.runtime.guide.on(eventName, function (payload) {
            var BUSINESS = 'business';
            var PRIVATE = 'private';
            var alternativeContext = {};
            alternativeContext[BUSINESS] = PRIVATE;
            alternativeContext[PRIVATE] = BUSINESS;

            var customerAddressData = {};
            customerAddressData.private = {
                city: payload.private_address_city || '',
                country: payload.private_address_country || '',
                houseNumber: payload.private_address_housenumber || '',
                postalCode: payload.private_address_postalcode || '',
                street: payload.private_address_street || '',

            };

            customerAddressData.business = {
                city: payload.business_address_city || '',
                companyName: payload.business_address_companyname || '',
                country: payload.business_address_country || '',
                houseNumber: payload.business_address_housenumber || '',
                postalCode: payload.business_address_postalcode || '',
                street: payload.business_address_street || '',
            };

            var valueProperty = propertyName || currentTarget.name;
            var preferredContext = customerAddressData[addressContext.toLowerCase()];
            alternativeContext = customerAddressData[alternativeContext[addressContext.toLowerCase()]];

            if (preferredContext === undefined) {
                if (alternativeContext !== undefined) {
                    currentTarget.value = alternativeContext[valueProperty];
                    currentTarget.executeExpression('valueCommit');
                }
            } else {
                currentTarget.value = preferredContext[valueProperty];
                currentTarget.executeExpression('valueCommit');
            }
        });
        return currentTarget.value;
    }

    /**
     * Trigger event that will set a single named property on listening fields to the provided value
     *
     * @name setValueOnEvent Trigger Event to Modify a Value of listening Fields
     * @memberof guidelib.bf.func.Events
     * @param eventName {string} Name of the event to trigger
     * @param property {string} Property to be set
     * @param value {string|boolean|number} New value of the property
     * @return {string|boolean|number}
     */
    function triggerValueEvent(eventName, property, value) {
        var payload = {};
        payload[property] = value;
        guidelib.runtime.guide.trigger(eventName, [payload]);
        return value;
    }

    return {
        setNamedValueOnEvent: setNamedValueOnEvent,
        triggerValueEvent: triggerValueEvent,
        setNamedAddressValueOnEvent: setNamedAddressValueOnEvent,
    };
}());

/**
 * This function manages appointment date and time
 *
 * @name manageAppointmentDateTime Manage Appointment Date and Time
 * @author eggs unimedia GmbH info@eggs.de
 * @param dateFieldName datepicker field name
 * @param timeDropdownFieldName time dropdown field name
 * @param timeRadioFieldName time radio field name
 */
function manageAppointmentDateTime(dateFieldName, timeDropdownFieldName, timeRadioFieldName) {
    var dateField = guideBridge.resolveNode(dateFieldName);
    var timeDropdownField = guideBridge.resolveNode(timeDropdownFieldName);
    var timeRadioField = guideBridge.resolveNode(timeRadioFieldName);
    var defaultTime = '';

    if (timeDropdownField.visible) {
        defaultTime = timeDropdownField.value ? timeDropdownField.value : '00:00:00';
    } else if (timeRadioField.visible) {
        defaultTime = timeRadioField.value ? timeRadioField.value : '00:00:00';
    }

    var dateFieldFinalValue = dateField.value ? dateField.value + 'T' + defaultTime + 'Z' : '';
    return dateFieldFinalValue;
}

guidelib.bf.func.BusinessPartnerSubmitData = (function () {
    /**
     * This function returns the language code used in the form without the country code
     *
     * @name getLanguageCode Get ISO language code
     * @memberof guidelib.bf.func.BusinessPartnerSubmitData
     * @author eggs unimedia GmbH info@eggs.de
     * @return {string} ISO language code without country in upper case
     */
    function getLanguageCode() {
        var formLanguage = guidelib.bf.context.lang;
        return formLanguage.substr(0, 2).toUpperCase();
    }
    return {
        getLanguageCode: getLanguageCode,
    };
}());

/**
 * Returns the value of the double dropdown list
 *
 * @name setValueFromDropDown Sets value from the double drop down
 * @author eggs unimedia GmbH info@eggs.de
 * @param {string} field the double drop down field
 * @param {integer} index 0 for category and 1 for property
 * @param {string} splitter Split the value by this char, normally |
 * @return {string} returns the value from the double drop down
 */
function setValueFromDropDown(field, index, splitter) {
    return field.split(splitter)[index];
}

guidelib.bf.func.Repeatable = (function () {
    /**
     * This function returns the somID of the first repeatable panel.
     * If no repeatable panel is found, it will return false.
     *
     * @name findParentThatIsRepeatable Get ISO language code
     * @memberof guidelib.bf.func.Repeatable
     * @author eggs unimedia GmbH info@eggs.de
     * @param guideNode object of guidelib.runtime.guide.runtime.$event.target or guideNode
     * @return {string|boolean} complete somId or false
     */
    function findParentThatIsRepeatable(guideNode) {
        if (guideNode.canBeRepeatable) {
            return guideNode.somExpression;
        } if (guideNode.parent) {
            return findParentThatIsRepeatable(guideNode.parent);
        }
        return false;
    }

    /**
     * This function returns the last part of the somId
     *
     * @name cutSomId Get last somId part
     * @memberof guidelib.bf.func.Repeatable
     * @author eggs unimedia GmbH info@eggs.de
     * @param somId somID
     * @return {string} last part of the somId
     */
    function cutSomId(somId) {
        var nameArray = somId.split('.');
        return nameArray[nameArray.length - 1];
    }

    /**
     * This function returns a value used for events to identify the repeatable parent
     *
     * @name getEventExtension Get ID for event Extension
     * @memberof guidelib.bf.func.Repeatable
     * @author eggs unimedia GmbH info@eggs.de
     * @param guideNode Guide Node for which the repeatbale parent is searched
     * @return {string} Empty string it no repeatable panel is available or the panel id starting with a '_'
     */
    function getEventExtension(guideNode) {
        var repeatableNode = findParentThatIsRepeatable(guideNode);
        if (repeatableNode) {
            return '_'.concat(cutSomId(repeatableNode));
        }
        return '';
    }

    return {
        findParentThatIsRepeatable: findParentThatIsRepeatable,
        cutSomId: cutSomId,
        getEventExtension: getEventExtension,
    };
}());

/**
 * Returns true if vehicleConfig from Configurator is available;
 * as the UCP calls are async, this function is only showing the state at the moment
 *
 * @name isVehicleConfigAvailable Is Vehicle Config Available
 * @author eggs unimedia GmbH info@eggs.de
 * @return {boolean} true if config is available
 */
function isVehicleConfigAvailable() { // eslint-disable-line no-unused-vars
    return guidelib.bf.vehicleConfig.isConfigAvailable();
}

/**
 * Sets the Cosy Image when a ConfigAvailable event was triggered
 *
 * @name setVehicleConfigCosyImage Set Cosy Image
 * @param {string} topic Topic to subscribe to
 * @param seriesDropdownName The Cosy Image Element
 * @returns {boolean}
 */
function setVehicleConfigCosyImage(topic, seriesDropdownName) { // eslint-disable-line no-unused-vars
    (function ($, guideBridge) {
        /* wait for document ready to hae require available */
        var seriesNode = guideBridge.resolveNode(seriesDropdownName);

        var cosyTarget = (seriesNode.jsonModel && seriesNode.jsonModel.cosyTarget) || 'VehicleCosyImage';

        $(document).ready(function () {
            // eslint-disable-next-line global-require, import/no-dynamic-require
            require(['postal.aem-form'], function (postal) {
                var AF_CHANNEL = 'af';
                var formChannel = postal.channel(AF_CHANNEL);
                // Set Value from outside
                formChannel.subscribe(topic, function (data) {
                    var cosyData = {
                        modelCode: data.agModelCode,
                        brand: data.manufacturer + data.brand,
                        paint: Object.keys(data.options).filter(paintFilter).join(','),
                        fabric: Object.keys(data.options).filter(fabricFilter).join(','),
                        saCodes: Object.keys(data.options).filter(saFilter).join(','),
                        cosyTarget: cosyTarget,
                    };
                    $(document).trigger('bmw-forms-cosy-update', cosyData);
                });
            });
        });
    }($, guideBridge));
    return true;
}
/**
 * @private
 */
function fabricFilter(data) {
    return data.startsWith('F');
}
/**
 * @private
 */
function paintFilter(data) {
    return data.startsWith('P');
}
/**
 * @private
 */
function saFilter(data) {
    return data.startsWith('S');
}

guidelib.bf.func.BrochurePool = (function () {
    /**
     * @typedef Brochure
     * @type {object}
     * @property {string} id
     * @property {string} brand
     * @property {string} informationType
     * @property {string} informationSubType
     * @property {string} modelCodes
     * @property {string} modelRanges
     * @property {string} productSeries
     * @property {string} category
     * @property {string} label
     * @property {string} languageISO
     * @property {string} downloadLink
     * @property {string} brochureGroup
     * @property {string} description
     */

    var cachedResults = {}; // key = requestKey
    var latestRequestKey = {}; // key = dropdownSom
    var latestInformationType = {}; // key = dropdownSom
    var brochureMap = {}; // key = brochure.id
    var brochureTypeInitialized = {}; // key = dropdownSom

    /**
     * This function gets and populates the brochure list
     *
     * @name populateBrochurePoolOptions Brochure Pool: Populate Options
     * @memberof guidelib.bf.func.BrochurePool
     * @author eggs unimedia GmbH info@eggs.de
     * @param {string} informationType Please select the field containing the information type.
     * @param {string} [modelRangeCode] Please select the field containing the model range code.
     * @param {string} [modelCode] Please select the field containing the model code.
     * @param {string} [brochureTypeToggleName] Please specify the name of the field containing the information type.
     * @return {OPTIONS} dropdown options
     */
    function populateBrochurePoolOptions(informationType, modelRangeCode, modelCode, brochureTypeToggleName) {
        var dropdownNode = guidelib.runtime.guide.runtime.$event.target;
        var brochureTypeToggle = brochureTypeToggleName ? guidelib.runtime.guide.runtime[brochureTypeToggleName] : null;
        var dropdownSom = dropdownNode.somExpression;
        var newItems = dropdownNode.jsonModel.options; // does not establish dependency

        // TODO: add logic for brochureId, also selecting correct information type on initialize

        if (informationType) {
            var modelRange = modelRangeCode == null ? '' : modelRangeCode;
            var model = modelCode == null ? '' : modelCode;

            var inputs = {
                currentresource: guidelib.bf.form.resource,
                language: guidelib.bf.context.lang,
                modelrange: modelRange,
                modelcode: model,
            };

            var requestKey = _createRequestKey(inputs);

            if (latestRequestKey[dropdownSom] !== requestKey || latestInformationType[dropdownSom] !== informationType) {
                latestRequestKey[dropdownSom] = requestKey;
                latestInformationType[dropdownSom] = informationType;
                var results = cachedResults[requestKey];
                if (results) {
                    // results found in cache - immediately assign new items
                    newItems = _createDropdownOptions(results, informationType);
                    _assignPreselectedValues(informationType, dropdownNode, results, brochureTypeToggle);
                } else {
                    // retrieve results from service
                    var operationInfo = guidelib.bf.ws.Registry.BUSINESS_FORMS_BROCHURE_POOL$GET_BROCHURES_LIST;
                    guidelib.dataIntegrationUtils.executeOperation(operationInfo, inputs, {}, function (data) {
                        results = JSON.parse(data);
                        cachedResults[requestKey] = results;
                        dropdownNode.items = _createDropdownOptions(results, informationType);
                        _assignPreselectedValues(informationType, dropdownNode, results, brochureTypeToggle);
                    });
                }
            }
        }
        return newItems;
    }

    /**
     *
     * @param results
     * @param informationType
     * @return {string[]}
     * @private
     */
    function _createDropdownOptions(results, informationType) {
        // create array of "key=value" strings
        return results.BrochureList.filter(function (brochure) {
            brochureMap[_resultToOptionsKey(brochure)] = brochure;
            return brochure.informationType === informationType;
        }).map(function (brochure) {
            return _resultToOptionsRepresentation(brochure);
        });
    }

    /**
     *
     * @param informationType
     * @param {object} dropdownNode
     * @param {object} results
     * @param brochureTypeToggle
     * @param {Brochure[]} results.BrochureList
     * @private
     */
    function _assignPreselectedValues(informationType, dropdownNode, results, brochureTypeToggle) {
        // don't override existing selection
        if (dropdownNode.isEmpty()) {
            var hashMap = _getHashAsMap(window.location.href);

            var modelRangeUrlParam = hashMap.modelRange;
            var modelCodeUrlParam = hashMap.model || hashMap.modelCode;
            var modelSeriesUrlParam = hashMap.series;
            var brochureIdUrlParam = hashMap.brochureId;

            // no point in selecting items if there are no restrictions
            if (brochureIdUrlParam || modelRangeUrlParam || modelCodeUrlParam || modelSeriesUrlParam) {
                var maxValues = dropdownNode.jsonModel.maxItems || dropdownNode.jsonModel.maxListItemsAllowed;
                var preselectionResult = _getPreselectedItems(informationType, results.BrochureList, brochureIdUrlParam,
                    modelCodeUrlParam, modelRangeUrlParam, modelSeriesUrlParam, maxValues);
                if (preselectionResult.itemValues && preselectionResult.itemValues.length) {
                    dropdownNode.value = preselectionResult.itemValues.join('\n');
                    dropdownNode.executeExpression('valueCommit');
                }
                if (!brochureTypeInitialized[dropdownNode.somExpression]) {
                    brochureTypeInitialized[dropdownNode.somExpression] = true;
                    if (brochureTypeToggle && preselectionResult.initialInformationType) {
                        brochureTypeToggle.value = preselectionResult.initialInformationType;
                        brochureTypeToggle.executeExpression('valueCommit');
                    }
                }
            }
        }
    }

    /**
     * Creates a deterministic key from request inputs for caching purposes
     * @param inputs
     * @return {*}
     * @private
     */
    function _createRequestKey(inputs) {
        return inputs.currentresource + '$' + inputs.language + '$'
            + inputs.modelrange + '$' + inputs.modelcode;
    }

    /**
     * Creates a composite value of a brochure options item
     * @param currentBrochure
     * @return {string}
     * @private
     */
    function _resultToOptionsKey(currentBrochure) {
        return currentBrochure.id;
    }

    /**
     * Creates a brochure option item represented by its composite value and its label, separated by the '=' character
     * @param currentBrochure
     * @return {string}
     * @private
     */
    function _resultToOptionsRepresentation(currentBrochure) {
        var label = currentBrochure.label ? currentBrochure.label : '';
        return _resultToOptionsKey(currentBrochure) + '=' + label;
    }

    /**
     * Checks if a brochure property contains an expected value and, if so, adds this items
     * composite value to a filter group.
     *
     * Returns true if a match was found.
     *
     * @param filterGroup
     * @param currentItem
     * @param itemValues
     * @param expectedValue
     * @return {boolean} true, if the filter matched
     * @private
     */
    function _filterItem(filterGroup, currentItem, itemValues, expectedValue) {
        return !!(
            expectedValue
            && itemValues
            && (itemValues.includes('\n') ? itemValues.split('\n').indexOf(expectedValue) > -1 : itemValues === expectedValue)
            && filterGroup.push(_resultToOptionsKey(currentItem))
        );
    }

    /**
     * This function gets an url and extracts hash as map
     * @param href String containing a URL
     * @return {{}} An Object that contains Brochure specific values
     * @private
     */
    function _getHashAsMap(href) {
        var values = ['series', 'modelRange', 'model', 'modelCode', 'brochureId'];
        var params = {};
        values.forEach(function (value) {
            var result = window.guidelib.bf.ParameterUtils.getQueryParams(value, href);
            if (result) {
                params[value] = result;
            }
        });
        return params;
    }

    /**
     *
     * @param requestedInformationType
     * @param {Brochure[]} allBrochures
     * @param brochureId
     * @param modelRange
     * @param modelCode
     * @param modelSeries
     * @param maxPreselectables
     * @return {{initialInformationType: (string|null), itemValues: *}} array of preselected item values
     * @private
     */
    function _getPreselectedItems(requestedInformationType, allBrochures, brochureId, modelCode, modelRange, modelSeries, maxPreselectables) {
        var mostSpecificFilter = 3;
        if (brochureId) {
            mostSpecificFilter = 0;
        } else if (modelCode) {
            mostSpecificFilter = 1;
        } else if (modelRange) {
            mostSpecificFilter = 2;
        }
        var i; var infoTypeFilterGroups = {}; var
            foundBrochureId = false;
        var initialInformationType = null;

        // iterate the results
        for (i = 0; i < allBrochures.length; i++) {
            var currentItem = allBrochures[i];
            var filterGroups = infoTypeFilterGroups[currentItem.informationType];
            if (!filterGroups) {
                filterGroups = [[], [], [], []];
                infoTypeFilterGroups[currentItem.informationType] = filterGroups;
            }
            // stop early if the max values property is reached with the most specific filter
            if (infoTypeFilterGroups[requestedInformationType]
                && infoTypeFilterGroups[requestedInformationType][mostSpecificFilter].length >= maxPreselectables
                && (mostSpecificFilter > 0 || foundBrochureId)) {
                break;
            }
            // search from most to least specific filter criteria, stopping at a match
            var isIdBrochure = _filterItem(filterGroups[0], currentItem, currentItem.id, brochureId);
            // todo: refactor
            // eslint-disable-next-line
            isIdBrochure || _filterItem(filterGroups[1], currentItem, currentItem.modelCodes, modelCode)
            || _filterItem(filterGroups[2], currentItem, currentItem.modelRanges, modelRange)
            || _filterItem(filterGroups[3], currentItem, currentItem.productSeries, modelSeries);
            if (isIdBrochure) {
                // determine informationType of brochure that was preselected by informationId
                initialInformationType = currentItem.informationType;
                foundBrochureId = true;
            }
        }

        var infoTypePreselectedItemValues = {};
        Object.keys(infoTypeFilterGroups).forEach(function (infoTypeKey) {
            // fill selection from most to least specific, stopping at maxPreselectables
            filterGroups = infoTypeFilterGroups[infoTypeKey];
            var preselectedItemValues = filterGroups[mostSpecificFilter];
            for (i = mostSpecificFilter + 1; i < filterGroups.length && preselectedItemValues.length < maxPreselectables; i++) {
                preselectedItemValues = preselectedItemValues.concat(filterGroups[i].slice(0, maxPreselectables - preselectedItemValues.length));
            }
            infoTypePreselectedItemValues[infoTypeKey] = preselectedItemValues;
        });

        // if no matching brochures have been found for the given information type,
        // the user might be better off with a type that actually has brochures
        if (initialInformationType == null
            && (!infoTypePreselectedItemValues[requestedInformationType]
            || infoTypePreselectedItemValues[requestedInformationType].length === 0)) {
            initialInformationType = Object.keys(infoTypeFilterGroups).find(function (infoTypeKey) {
                return infoTypePreselectedItemValues[infoTypeKey].length > 0;
            });
        }

        return {
            initialInformationType: initialInformationType,
            itemValues: infoTypePreselectedItemValues[requestedInformationType],
        };
    }

    /**
     *
     * @param {Brochure} brochure
     * @return {object}
     * @private
     */
    function _createMoreObjectForBrochure(brochure) {
        return {
            brand: brochure.brand,
            brochureGroup: brochure.category,
            informationType: brochure.informationType,
            informationId: brochure.id,
            informationName: brochure.label,
            informationSubType: brochure.informationSubType,
            productModelCode: resolveProductModelCode(brochure.modelCodes),
            productModelRange: resolveProductModelRange(brochure.modelRanges),
            productModelCodeArray: resolveProductInformation(brochure.modelCodes),
            productModelRangeArray: resolveProductInformation(brochure.modelRanges),
            productSeries: brochure.productSeries,
            languageISO: brochure.languageISO,
            customExtension: {
                parameters: [
                    {
                        key: 'URL_LINK_BROCHURE',
                        value: brochure.downloadLink,
                    },
                    {
                        key: 'DESCRIPTION',
                        value: brochure.label,
                    },
                ],
            },
        };
    }

    /**
     * This function extracts the value for the property {@code productModelCode}
     * @param modelCodes
     * @returns {string}
     */
    function resolveProductModelCode(modelCodes) {
        var result = '';
        if (modelCodes && typeof modelCodes === 'string') {
            result = modelCodes.split('\n')[0];
        }
        return result;
    }

    /**
     * This function extracts the value for the property {@code productModelRange}
     * @param modelRanges
     * @returns {string}
     */
    function resolveProductModelRange(modelRanges) {
        var result = '';
        if (modelRanges && typeof modelRanges === 'string') {
            result = modelRanges.split('\n')[0];
        }
        return result;
    }

    /**
     * This function extracts the values for the property's {@code productModelCodeArray, productModelRangeArray}
     * @param modelRanges
     * @returns {array}
     */
    function resolveProductInformation(string) {
        var result = [];
        if (string && typeof string === 'string') {
            result = string.split('\n');
        }
        return result;
    }

    /**
     * Create MORE data for selected brochures.
     *
     * @name createSelectedBrochureJsonPayload Brochure Pool: Create Submission Data
     * @memberof guidelib.bf.func.BrochurePool
     * @param {string} selectedBrochuresValue Please select the brochure list field.
     * @return {string} Data to submit to GCDM
     */
    function createSelectedBrochureJsonPayload(selectedBrochuresValue) {
        var jsonBrochures = [];
        if (selectedBrochuresValue != null) {
            var brochureIds = selectedBrochuresValue.split('\n');
            for (var idx = 0; idx < brochureIds.length; idx++) {
                var brochureId = brochureIds[idx];
                var brochure = brochureMap[brochureId];
                if (brochure) {
                    jsonBrochures.push(_createMoreObjectForBrochure(brochure));
                }
            }
        }
        return JSON.stringify(jsonBrochures);
    }

    /**
     * Returns a Boolean that shows if a prefill script was executed or not
     *
     * @memberof guidelib.bf.func.BrochurePool
     * @name isPrefilled Check Brochuredropdown prefill
     * @return {boolean}
     */
    function isPrefilled() {
        var hashMap = _getHashAsMap(window.location.href);

        return !Object.values(hashMap).every(function (x) {
            return x === null || x === '' || x === undefined;
        });
    }

    return {
        isPrefilled: isPrefilled,
        createSelectedBrochureJsonPayload: createSelectedBrochureJsonPayload,
        populateBrochurePoolOptions: populateBrochurePoolOptions,
    };
}());

/* eslint-disable no-restricted-globals, no-nested-ternary */
guidelib.bf.func.Login = (function ($) {
    var _windowObjectReference = null;

    function _getAdobeMarketingId() {
        var midVal = ''; // Applicable only to BMW company
        var orgId = 'B52D1CFE5330949C0A490D45%40AdobeOrg'; // in encoded format used for checking cookie name

        // check if the s object exists
        // eslint-disable-next-line no-undef
        if (typeof s === 'object' && s.visitor && typeof s.visitor === 'object') {
            // eslint-disable-next-line no-undef
            midVal = s.visitor.getMarketingCloudVisitorID();
        } else if (document.cookie.indexOf(orgId) > -1) { // fallback if Adobe Launch not available
            var cookieVal = document.cookie.split('AMCV_' + orgId)[1];
            if (cookieVal) {
                cookieVal = cookieVal.split(';')[0];
                cookieVal = decodeURIComponent(cookieVal);
                midVal = cookieVal.split('MCMID|')[1].split('|')[0];
            }
        }
        return midVal;
    }

    /**
     * Open login dialog
     *
     * @name openLoginDialog Show Login Dialog
     * @memberof guidelib.bf.func.Login
     * @author eggs unimedia GmbH info@eggs.de
     */
    function openLoginDialog() {
        var currentUrl = new URL(window.location);

        var url = 'https://'
            + guidelib.bf.runmode.gcdmhost
            + '/oneid/#/login?client=' + guidelib.bf.context.oneLoginClient
            + '&brand=' + guidelib.bf.context.brand
            + '&country=' + guidelib.bf.context.market
            + '&language=' + guidelib.bf.context.lang.substr(0, guidelib.bf.context.lang.indexOf('_'))
            + '&scope=' + guidelib.bf.context.oneLoginScope.replace(/\s/g, '%20')
            + '&response_type=token'
            + '&epaas_consenttoken=' + epaas.api.createConsentToken()
            + '&acid=' + _getAdobeMarketingId()
            + '&redirect_uri=' + currentUrl.origin + guidelib.bf.context.oneRedirectUri
            + '&state=' + btoa(currentUrl.origin + $('.loginButton').data('redirect'));

        var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;

        var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - 300) + dualScreenLeft;
        var top = ((height / 2) - 300) + dualScreenTop;

        var strWindowFeatures = 'toolbar=no, menubar=no, width=600, height=700, top=' + top + ', left=' + left;

        if (_windowObjectReference === null || _windowObjectReference.closed) {
            /* if the pointer to the window object in memory does not exist
             or if such pointer exists but the window was closed */
            _windowObjectReference = window.open(url, '', strWindowFeatures);

            var waitForClose = setInterval(function () {
                if (_windowObjectReference.closed) {
                    if (document.cookie.indexOf('gcdmToken') !== -1) {
                        guideBridge._guide.trigger('loginSuccess');
                        $(window).trigger('login:status:changed');
                        window.parent.postMessage('login:status:changed', '*');
                    } else {
                        guideBridge._guide.trigger('loginFailed');
                    }
                    clearInterval(waitForClose);
                }
            }, 250);
        } else {
            /* else the window reference must exist and the window
             is not closed; therefore, we can bring it back on top of any other
             window with the focus() method. There would be no need to re-create
             the window or to reload the referenced resource. */
            _windowObjectReference.focus();
        }
    }

    // noinspection JSUnusedGlobalSymbols
    return {
        openLoginDialog: openLoginDialog,

    };
}($));

/**
 * Monitoring
 *
 * @name Monitoring object contains id that is populated when createMonitoringID is called.
 * The purpose of it is to reuse the same id for different cases like submitting in headers post and populating fields.
 * @author eggs unimedia GmbH info@eggs.de
 */
guidelib.bf.func.Monitoring = (function (guidelib) {
    var id = null;
    var idBase = null;
    var eventToTrigger = 'formMetadata';
    var payload = { uusubmitid: id };
    /**
     * Creates a unique ID to be places in the header during submissions. In that way these can be tracked.
     *
     * @name getMonitoringID Monitoring: Unique ID for tracking submissions
     * @memberof guidelib.bf.func.Monitoring
     * @author eggs unimedia GmbH info@eggs.de
     * @returns {string}
     */
    function getMonitoringID() {
        if (idBase === null) {
            _setBaseID();
        }
        if (id === null) {
            var formType = '';
            return guideBridge.connect(setTimeout(() => {
                _setFormTypes();
                if (guidelib && guidelib.bf && guidelib.bf.formTypes) {
                    if (guidelib.bf.formTypes.selected.length === 0) {
                        formType = 'CAMPAIGN';
                    } else {
                        formType = guidelib.bf.formTypes.selected[0] || '';
                    }
                }
                id = idBase + formType.toUpperCase();
                payload.uusubmitid = id;
                guidelib.runtime.guide.trigger(eventToTrigger, payload);
                return id;
            }), 0);
        }
        return id; // length: 4 + @ + 10 + 16 + (3 or 4) = 33 or 34 return id;
    }

    /**
     * update the Monitoring ID in case of changed form type e.q. RFI to RFID
     *
     * @name updateMonitoringID Update monitoring ID
     * @memberof guidelib.bf.func.Monitoring
     * @author eggs unimedia GmbH info@eggs.de
     * @param {string} newFormTyp new form type
     * @return {string}
     */
    function updateMonitoringID(newFormTyp) {
        if (idBase === null) {
            _setBaseID();
        }
        if (newFormTyp === null) {
            newFormTyp = '';
        }
        id = idBase + newFormTyp;
        return id;
    }

    /**
     * setup the static part of the request id
     *
     * @memberof guidelib.bf.func.Monitoring
     * @author eggs unimedia GmbH info@eggs.de
     * @private
     */
    function _setBaseID() {
        if (guidelib && guidelib.bf) {
            var brandMonitoringID = guidelib.bf.context.brandMonitoringId || '';
        }

        var date = new Date();
        var timestamp = Math.floor(date.getTime() / 1000);
        var random = _randomString(16, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_-');

        idBase = brandMonitoringID + '@' + timestamp + random;
    }

    /**
     *
     * @memberof guidelib.bf.func.Monitoring
     * @param length
     * @param chars
     * @returns {string}
     * @private
     */
    function _randomString(length, chars) {
        var result = '';
        for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
        return result;
    }

    /**
     *
     * @memberof guidelib.bf.func.Monitoring
     */
    function _setFormTypes() {
        if (guidelib.bf && guidelib.bf) {
            if (guidelib.bf.formTypes !== undefined) {
                if (guidelib.bf.formTypes.available === undefined) {
                    guidelib.bf.formTypes.available = [];
                } if (guidelib.bf.formTypes.selected === undefined) {
                    guidelib.bf.formTypes.selected = [];
                }
            } else {
                guidelib.bf.formTypes = {
                    selected: [],
                    available: [],
                };
            }
        }

        guideBridge.visit((component) => {
            var bindRef = component.bindRef;
            if (bindRef) {
                const reg = /(requests\/)(.*)(\/includeInSubmit)/g;
                const matchResult = bindRef.match(reg);
                if (matchResult) {
                    var formType = matchResult[0].replace('requests/', '').replace('/includeInSubmit', '');
                    guidelib.bf.formTypes.available.push(formType);
                    if (component.value === 'true') {
                        guidelib.bf.formTypes.selected.push(formType);
                    }
                }
            }
        });
    }

    return {
        getMonitoringID: getMonitoringID,
        updateMonitoringID: updateMonitoringID,
    };
}(guidelib));

/* eslint-disable no-restricted-globals */
(function loader() {
    var loaderContainer = document.getElementById('loadingPage');

    /**
     * @private
     */
    function setLoaderPosition() {
        var bottom = 0;
        if ($('#aemFormFrame', parent.document).length === 1) {
            var heights = ({
                iframeHeight: $('#aemFormFrame', parent.document).height(),
                scrollFromTop: window.parent.window.scrollY + (window.parent.window.innerHeight / 2) - $('#aemFormFrame', parent.document).offset().top,
            });

            bottom = heights.iframeHeight - heights.scrollFromTop;
            bottom = bottom > 0 ? bottom : 0;
        }
        loaderContainer.style.bottom = bottom + 'px';
    }

    /**
     * @private
     */
    function loaderState() {
        if (loaderContainer.classList.contains('guideServiceLoading') || loaderContainer.classList.contains('guideBusinessPartnerLoading')) {
            setLoaderPosition();
            window.parent.window.addEventListener('scroll', setLoaderPosition);
        } else {
            window.parent.window.removeEventListener('scroll', setLoaderPosition);
        }
    }

    /**
     * @private
     */
    function classChange(mutationsList, observer) {
        mutationsList.forEach(function (mutation) {
            if (mutation.attributeName === 'class') {
                if (window.parentIFrame && ($('.guideServiceLoading').length === 1 || $('.guideBusinessPartnerLoading').length === 1)) {
                    loaderState();
                }
            }
        });
    }

    var mutationObserver = new MutationObserver(classChange);
    mutationObserver.observe(loaderContainer, { attributes: true });
}());

guidelib.bf.func.Accessory = (function () {
    var params = {
        accessoryId: undefined,
        accessoryName: undefined,
        accessoryPrice: undefined,
        accessoryImage: undefined,
    };
    var BINDREF_ID = '/MultiOfferResponse/requests/RFA/accessoryList/accessories/accessoryId';
    var BINDREF_NAME = '/MultiOfferResponse/requests/RFA/accessoryList/accessories/accessoryName';
    var BINDREF_PRICE = '/MultiOfferResponse/requests/RFA/accessoryList/accessories/accessoryPrice';
    var fieldsMapping = {
        accessoryId: undefined,
        accessoryName: undefined,
        accessoryPrice: undefined,
        accessoryImage: undefined,
    };

    /**
     * This function searches for the Accessory fields on the form and if availble set value from url
     * @author eggs unimedia GbmH info@eggs.de
     *
     * @name setAccessoryFields Set accessory fields from URL
     * @memberof guidelib.bf.func.Accessory
     */
    function setAccessoryFields() {
        var fieldList = [];
        var fieldValues = [];
        params = _getAccessoryFromPath();
        guideBridge.visit(function (component) {
            switch (component.bindRef) {
            case BINDREF_ID:
                fieldsMapping.accessoryId = component;
                break;
            case BINDREF_NAME:
                fieldsMapping.accessoryName = component;
                break;
            case BINDREF_PRICE:
                fieldsMapping.accessoryPrice = component;
                break;
            default:
                break;
            }

            if (component.name === 'accessoryImage') {
                fieldsMapping.accessoryImage = component;
            }
        });
        if (fieldsMapping.accessoryId) {
            fieldList.push(fieldsMapping.accessoryId.somExpression);
            fieldValues.push(params.accessoryId);
        }
        if (fieldsMapping.accessoryName) {
            fieldList.push(fieldsMapping.accessoryName.somExpression);
            fieldValues.push(params.accessoryName);
        }
        if (fieldsMapping.accessoryPrice) {
            fieldList.push(fieldsMapping.accessoryPrice.somExpression);
            fieldValues.push(params.accessoryPrice);
        }
        if (fieldsMapping.accessoryImage) {
            window.guideBridge.setProperty([fieldsMapping.accessoryImage.somExpression], 'imageUrl', [params.accessoryImage]);
        }

        window.guideBridge.setProperty(fieldList, 'value', fieldValues);
    }

    /**
     * Set Value of calling Component to parameter string
     *
     * @author eggs unimedia GmbH info@eggs.de
     * @memberof guidelib.bf.func.Accessory
     *
     * @name setTitle Set Accessory Title
     * @param titleValue set Title Component Value
     * @param titleFieldName
     */
    function setTitle(titleValue, titleFieldName) {
        var titleField = guideBridge.resolveNode(titleFieldName);
        window.setTimeout(function () { titleField.value = titleValue; }, 1);
    }
    /**
     * this function returns a JSON with the found values for the accessory
     * @author eggs unimedia GmbH info@eggs.de
     * @return {{}}
     * @private
     */
    function _getAccessoryFromPath() {
        var href = window.location.href;
        var values = ['accessoryId', 'accessoryName', 'accessoryPrice', 'accessoryImage'];
        values.forEach(function (value) {
            var result = window.guidelib.bf.ParameterUtils.getQueryParams(value, href);
            if (result) {
                params[value] = result.replaceAll('+', ' ');
            }
        });
        return params;
    }
    return {
        setAccessoryFields: setAccessoryFields,
        setTitle: setTitle,
    };
}());

$(document).ready(function () {
    $('.guideFieldDescription.short').each(function () {
        if ($(this).attr('style') === '') {
            var id = $(this).attr('id').substring(0, $(this).attr('id').indexOf('___'));
            $(document).find('#' + id + '___widget').on('focus click mouseenter mouseleave hover', function () {
                $(document).find('.tooltip').hide();
            });
        }
    });
});

guidelib.bf.func.fieldfunctions = (function () {
    /**
     * This function provides the selected display values of an radiobox component or a checkbox component
     *
     * @name getSelectedValues Get selected display values
     * @memberof guidelib.bf.func.fieldfunctions
     * @param {string}exclusiveGroupName Name Attribute of an Exclusion Group Component (Radiobutton or Checkbox)
     * @return {string} selected display values
     */
    function getSelectedValues(exclusiveGroupName) {
        return getSelectedValuesWithSeperator(exclusiveGroupName, ', ');
    }

    /**
     * This function provides the selected display values of an radiobox component or a checkbox component
     *
     * @name getSelectedValuesWithSeperator Get selected display values with custom seperator
     * @memberof guidelib.bf.func.fieldfunctions
     * @param {string}exclusiveGroupName Name Attribute of an Exclusion Group Component (Radiobutton or Checkbox)
     * @param {string}seperator Seperator for multivalue selection
     * @return {string} selected display values
     */
    function getSelectedValuesWithSeperator(exclusiveGroupName, seperator) {
        var result = '';
        var exclusiveGroupNode = guideBridge.resolveNode(exclusiveGroupName);
        var selectedValues = exclusiveGroupNode.value.split(',');
        var itemList = exclusiveGroupNode.items;
        var groupIsImageSelection;
        var isItemNameKey = /.*=.*/.test(itemList[0]);
        if (isItemNameKey) {
            groupIsImageSelection = /.*=\/.+#/.test(itemList[0]);
        } else {
            groupIsImageSelection = /=\/.+#/.test(itemList[0]);
        }
        var itemKey;
        selectedValues.forEach(function (selectedValue) {
            if (isItemNameKey) {
                var regExKeyString;
                if (groupIsImageSelection) {
                    regExKeyString = selectedValues.join().concat('=\\/.+#');
                } else {
                    regExKeyString = selectedValues.join().concat('=');
                }
                itemKey = new RegExp(regExKeyString);
            }

            var foundItem = itemList.find(function (itemListSearch) {
                return itemListSearch.includes(selectedValue);
            });
            if (isItemNameKey) {
                foundItem = foundItem.replace(itemKey, '');
            }
            if (result) {
                result = result.concat(seperator).concat(foundItem);
            } else {
                result = result.concat(foundItem);
            }
        });
        return result;
    }

    /**
     * This function provides a way to select a specific key part based on a separator
     *
     * @name getKeyPart Get key part
     * @memberof guidelib.bf.func.fieldfunctions
     * @param {string}key the key from which the part has to be extracted
     * @param {integer}part the part which should be extracted from the key
     * @param {string}separator separator to be used for extraction
     * @return {string} selected display values
     */
    function getKeyPart(key, part, separator) {
        var splitKey = key.split(separator);
        if (splitKey && splitKey.length >= part) {
            return splitKey[part - 1];
        }
        return '';
    }

    /**
     * This functions tests a Field Value against a regular Expression
     *
     * @name validateFieldTestRegEx validate Field Value agains Regular Expression
     * @memberof guidelib.bf.func.fieldfunctions
     * @param fieldValue Field Value
     * @param regularExpression Regular Expression as String
     * @returns {boolean}
     */
    function validateFieldTestRegEx(fieldValue, regularExpression) {
        var regEx = new RegExp(regularExpression);
        return regEx.test(fieldValue);
    }

    /**
     * This function returns the value of Date Field in the pattern given to the function
     *
     * @name getDateValue Date Value in Local Pattern
     * @memberof guidelib.bf.func.fieldfunctions
     * @param dateValue Date as String
     * @returns {string} String containing formatted date
     */
    function getDateValue(dateValue) {
        var date = '';
        // if dateValue is available and is valid format xxxx-yy-zz
        if (dateValue && dateValue.match(/^\d{4}-\d{2}-\d{2}$/)) {
            var options = {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
            };
            date = new Date(dateValue).toLocaleDateString(guidelib.bf.context.lang.replace('_', '-'), options);
        }
        return date;
    }

    return {
        getSelectedValues: getSelectedValues,
        getSelectedValuesWithSeperator: getSelectedValuesWithSeperator,
        getKeyPart: getKeyPart,
        validateFieldTestRegEx: validateFieldTestRegEx,
        getDateValue: getDateValue,
    };
}());

guidelib.bf.func.String = (function () {
    /**
     * Standard string function concat for Visual Editor
     *
     * @name concat concat
     * @memberof guidelib.bf.func.String
     * @param {string}firstPart First Part of the String
     * @param {string}secondPart Second Part of the String
     * @return {string} combined String from first and second Part
     */
    function concat(firstPart, secondPart) {
        if (firstPart === null) {
            return secondPart;
        }

        if (secondPart === null) {
            return firstPart;
        }

        return firstPart.concat(secondPart);
    }

    return {
        concat: concat,
    };
}());

